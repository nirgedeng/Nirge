#include "csharp_generator.h"
#include "csharp_helpers.h"
#include "csharp_service.h"

#include <string>
#include <sstream>
#include <vector>

#include <google/protobuf/compiler/plugin.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/io/printer.h>
#include <google/protobuf/io/zero_copy_stream.h>
#include <google/protobuf/stubs/strutil.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/printer.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/compiler/csharp/csharp_generator.h>
#include <google/protobuf/compiler/csharp/csharp_helpers.h>
#include <google/protobuf/compiler/csharp/csharp_names.h>
#include <google/protobuf/compiler/csharp/csharp_options.h>
#include <google/protobuf/compiler/csharp/csharp_reflection_class.h>
using google::protobuf::internal::scoped_ptr;

//------------------------------------------------------------------

namespace google
{
    namespace protobuf
    {
        namespace compiler
        {
            namespace csharp
            {
                bool CGenerator::Generate(const FileDescriptor* file, const std::string& parameter, GeneratorContext* context, std::string* error) const
                {
                    if (file->syntax() != FileDescriptor::SYNTAX_PROTO3 && !IsDescriptorProto(file))
                    {
                        *error = "C# code generation only supports proto3 syntax";
                        return false;
                    }

                    std::vector<std::pair<string, string>> args;
                    ParseGeneratorParameter(parameter, &args);
                    csharp::Options opts;

                    bool gen_caller = false;
                    bool gen_callee = false;
                    for (int i = 0; i < args.size(); i++)
                    {
                        if (args[i].first == "gen_caller")
                            gen_caller = true;
                        else if (args[i].first == "gen_callee")
                            gen_callee = true;
                        else
                        {
                            *error = "Unknown generator option: " + args[i].first;
                            return false;
                        }
                    }

                    if (!gen_caller && !gen_callee)
                    {
                        *error = "Unknown generator option";
                        return false;
                    }

                    if (file->service_count() == 0)
                        return true;

                    std::vector<CServiceGenerator*> services;

                    for (int i = 0; i < file->service_count(); ++i)
                    {
                        CServiceGenerator* e = new CServiceGenerator(file->service(i), opts, error);
                        services.push_back(e);
                        e->Init();
                    }

                    for (const auto& i : services)
                    {
                        if (gen_caller)
                        {
                            std::string s;
                            std::string f = i->CallerNameNoPrefix() + ".cs";
                            {
                                io::StringOutputStream stream(&s);
                                io::Printer printer(&stream, '$');

                                printer.Print
                                (
                                    "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n"
                                    "// source: $file_name$\n"
                                    "#pragma warning disable 1591, 0612, 3021\n"
                                    "\n"
                                    "#region Designer generated code\n"
                                    "\n"
                                    "using System;\n"
                                    "using System.Threading.Tasks;\n"
                                    "using Nirge.Core;\n"
                                    "using log4net;\n"
                                    "\n",
                                    "file_name", f
                                );

                                printer.Print("namespace $namespace$ {\n", "namespace", GetFileNamespace(file));
                                printer.Indent();
                                i->GenerateCaller(&printer);
                                printer.Outdent();
                                printer.Print("}\n\n");
                                printer.Print("#endregion\n");
                            }
                            {
                                std::unique_ptr<google::protobuf::io::ZeroCopyOutputStream> stream(context->Open(f));
                                google::protobuf::io::CodedOutputStream code(stream.get());
                                code.WriteRaw(s.data(), s.size());
                            }
                        }

                        if (gen_callee)
                        {
                            {
                                std::string s;
                                std::string f = i->InterfaceNameNoPrefix() + ".cs";
                                {
                                    io::StringOutputStream stream(&s);
                                    io::Printer printer(&stream, '$');

                                    printer.Print
                                    (
                                        "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n"
                                        "// source: $file_name$\n"
                                        "#pragma warning disable 1591, 0612, 3021\n"
                                        "\n"
                                        "#region Designer generated code\n"
                                        "\n"
                                        "using System;\n"
                                        "using Nirge.Core;\n"
                                        "\n",
                                        "file_name", f
                                    );

                                    printer.Print("namespace $namespace$ {\n", "namespace", GetFileNamespace(file));
                                    printer.Indent();
                                    i->GenerateInterface(&printer);
                                    printer.Outdent();
                                    printer.Print("}\n\n");
                                    printer.Print("#endregion\n");
                                }
                                {
                                    std::unique_ptr<google::protobuf::io::ZeroCopyOutputStream> stream(context->Open(f));
                                    google::protobuf::io::CodedOutputStream code(stream.get());
                                    code.WriteRaw(s.data(), s.size());
                                }
                            }
                            {
                                std::string s;
                                std::string f = i->CalleeNameNoPrefix() + ".cs";
                                {
                                    io::StringOutputStream stream(&s);
                                    io::Printer printer(&stream, '$');

                                    printer.Print
                                    (
                                        "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n"
                                        "// source: $file_name$\n"
                                        "#pragma warning disable 1591, 0612, 3021\n"
                                        "\n"
                                        "#region Designer generated code\n"
                                        "\n"
                                        "using System;\n"
                                        "using Nirge.Core;\n"
                                        "using log4net;\n"
                                        "\n",
                                        "file_name", f
                                    );

                                    printer.Print("namespace $namespace$ {\n", "namespace", GetFileNamespace(file));
                                    printer.Indent();
                                    i->GenerateCallee(&printer);
                                    printer.Outdent();
                                    printer.Print("}\n\n");
                                    printer.Print("#endregion\n");
                                }
                                {
                                    std::unique_ptr<google::protobuf::io::ZeroCopyOutputStream> stream(context->Open(f));
                                    google::protobuf::io::CodedOutputStream code(stream.get());
                                    code.WriteRaw(s.data(), s.size());
                                }
                            }
                        }
                    }

                    for (auto& i : services)
                    {
                        i->Destroy();
                        delete i;
                    }

                    return true;
                }
            }
        }
    }
}

//------------------------------------------------------------------
