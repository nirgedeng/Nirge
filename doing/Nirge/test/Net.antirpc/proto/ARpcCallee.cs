// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ARpcCallee.cs
#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using System;
using Nirge.Core;
using log4net;

namespace Nirge.Core {
  [CRpcService(1)]
  public class CARpcCallee : CRpcCallee<IARpcService> {
    public CARpcCallee(CRpcCalleeArgs args, ILog log, IRpcStream stream, IRpcTransfer transfer, IARpcService service)
    	: base(args, log, stream, transfer, global::Nirge.Core.AReflection.Descriptor.Services[0], service) {}
    public override void Call(int channel, Nirge.Core.RpcCallReq req) {
      switch (req.Call) {
      case 1:
        Call<Nirge.Core.RpcCallArgsEmpty, Nirge.Core.RpcCallArgsEmpty>(channel, req, (_, args) => {
          _service.a(channel);
          return ArgsEmpty;
        });
        break;
      case 2:
        Call<Nirge.Core.RpcCallArgsEmpty, Nirge.Core.RpcCallArgsEmpty>(channel, req, (_, args) => {
          _service.b(channel);
          return ArgsEmpty;
        });
        break;
      case 3:
        Call<Nirge.Core.cargs, Nirge.Core.RpcCallArgsEmpty>(channel, req, (_, args) => {
          _service.c(channel, args);
          return ArgsEmpty;
        });
        break;
      case 4:
        Call<Nirge.Core.dargs, Nirge.Core.RpcCallArgsEmpty>(channel, req, (_, args) => {
          _service.d(channel, args);
          return ArgsEmpty;
        });
        break;
      case 5:
        CallAsync<Nirge.Core.RpcCallArgsEmpty, Nirge.Core.RpcCallArgsEmpty>(channel, req, (_, args) => {
          _service.e(channel);
          return ArgsEmpty;
        });
        break;
      case 6:
        CallAsync<Nirge.Core.RpcCallArgsEmpty, Nirge.Core.fret>(channel, req, (_, args) => {
          return _service.f(channel);
        });
        break;
      case 7:
        CallAsync<Nirge.Core.gargs, Nirge.Core.RpcCallArgsEmpty>(channel, req, (_, args) => {
          _service.g(channel, args);
          return ArgsEmpty;
        });
        break;
      case 8:
        CallAsync<Nirge.Core.hargs, Nirge.Core.hret>(channel, req, (_, args) => {
          return _service.h(channel, args);
        });
        break;
      default:
        base.Call(channel, req);
        break;
      }
    }
  }
}

#endregion
