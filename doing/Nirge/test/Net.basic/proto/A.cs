// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from a.proto</summary>
public static partial class AReflection {

  #region Descriptor
  /// <summary>File descriptor for a.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static AReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgdhLnByb3RvIlYKD0cyQ19QVUxTRV9HRU1PThIOCgZjaGFyaWQYASABKAQS",
          "EgoKcHVsc2Vfc2xvdBgCIAEoBRIQCghnZW1fc2xvdBgDIAEoBRINCgVnZW1p",
          "ZBgEIAEoBSI8CgpTUEVMTF9JTkZPEgoKAmlkGAEgASgFEg0KBWxldmVsGAIg",
          "ASgFEhMKC2JvbnVzX2xldmVsGAMgASgFIigKC1RBTEVOVF9JTkZPEgoKAmlk",
          "GAEgASgFEg0KBWxldmVsGAIgASgFIi0KDVZBUklBQkxFX0lORk8SDQoFaW5k",
          "ZXgYASABKAUSDQoFdmFsdWUYAiABKAUiLQoOU0dFTV9BVFRSX0lORk8SDAoE",
          "YXR0chgBIAEoBRINCgV2YWx1ZRgCIAEoBSLDAQoJU0dFTV9JTkZPEg4KBnJl",
          "c19pZBgBIAEoBRIOCgZvYmpfaWQYAiABKAQSCwoDcG9zGAMgASgFEg8KB2lz",
          "X2JpbmQYBCABKAgSDwoHaXNfbG9jaxgFIAEoCBINCgVsZXZlbBgGIAEoBRIL",
          "CgNleHAYByABKAUSHQoEYXR0chgIIAEoCzIPLlNHRU1fQVRUUl9JTkZPEhYK",
          "DnRyYWRlX2Nvb2xkb3duGAkgASgNEhQKDGlzX2V4cGVuc2l2ZRgKIAEoCCL4",
          "DgoYRzJDX1NZTkNfUk9MRV9EQVRBX0JFR0lOEg4KBnJvbGVpZBgBIAEoBBIQ",
          "Cghyb2xlbmFtZRgCIAEoCRINCgVjbGFzcxgDIAEoBRIMCgRib2R5GAQgASgF",
          "Eg4KBmdlbmRlchgFIAEoBRINCgVsZXZlbBgGIAEoBRILCgNleHAYByABKAUS",
          "FgoOc3RvcnlfcHJvZ3Jlc3MYCCABKAUSDQoFZnJhbWUYCSABKAUSEwoLc2Vy",
          "dmVyX3RpbWUYCiABKA0SHwoKc3BlbGxfbGlzdBgLIAMoCzILLlNQRUxMX0lO",
          "Rk8SFwoPc3BlbGxfc2xvdF9saXN0GAwgASgFEhAKCHBvcnRyYWl0GA0gASgF",
          "EhQKDHBvcnRyYWl0X2JveBgOIAEoBRISCgpjbGllbnRfdmFyGBEgASgFEhAK",
          "CHNwaXJpdGlkGBkgASgEEhcKD2lzX3NraXBfYXJyYW5nZRgaIAEoCBIXCg9h",
          "Y3Rpdml0eV9yZXdhcmQYGyABKA0SEQoJZWxvX3Njb3JlGBwgASgFEhYKDnRl",
          "YW1fZWxvX3Njb3JlGB0gASgFEiEKC3RhbGVudF9saXN0GB4gASgLMgwuVEFM",
          "RU5UX0lORk8SGAoQdGFsZW50X3Nsb3RfbGlzdBgfIAEoBRIlCg1yb2xlX3Zh",
          "cl9saXN0GCAgASgLMg4uVkFSSUFCTEVfSU5GTxIYChBzZXJ2ZXJfdGltZV96",
          "b25lGCEgASgFEhYKDmlzX2FyZW5hX21hdGNoGCIgASgIEhIKCmxvZ2luX3Rp",
          "bWUYIyABKA0SEAoIZ3VpbGRfaWQYJCABKAQSGgoSbGFzdF9jaGVja19pbl90",
          "aW1lGCUgASgNEhgKEGxhc3RfY2hlY2tfaW5faWQYJiABKA0SFgoOY2hlY2tf",
          "aW5fY291bnQYJyABKA0SFgoObWF4X3JvbGVfbGV2ZWwYKCABKA0SIwoLZGFp",
          "bHlfbGltaXQYKSABKAsyDi5WQVJJQUJMRV9JTkZPEiQKDHdlZWtseV9saW1p",
          "dBgqIAEoCzIOLlZBUklBQkxFX0lORk8SGAoEc2dlbRgrIAEoCzIKLlNHRU1f",
          "SU5GTxIUCgxzdG9yeV9yZXdhcmQYLCABKA0SFgoOcnVzaF9tYXhfbGV2ZWwY",
          "LSABKAUSGQoRcnVzaF9kZWZlYXRfdGltZXMYLiABKAUSGAoQc2VydmVyX21h",
          "eF9sZXZlbBgvIAEoBRIYChBzZXJ2ZXJfYXZnX2xldmVsGDAgASgFEhwKFG5l",
          "eHRfbGV2ZWxfZGF5X2NvdW50GDEgASgFEhQKDG92ZXJmbG93X2V4cBgyIAEo",
          "AxIVCg1vbmxpbmVfcmV3YXJkGDMgASgNEhMKC29ubGluZV90aW1lGDQgASgN",
          "EhkKEXRvZGF5X29ubGluZV90aW1lGDUgASgNEhIKCm5leHRfbGV2ZWwYNiAB",
          "KAUSGwoTbGltaXRlZF90aW1lX3Jld2FyZBg3IAEoDRIbChNkdW5nZW9uX2Fj",
          "Y2VsZXJhdGVkGDkgASgIEgwKBGNpdHkYOiABKAUSEQoJbG9uZ2l0dWRlGDsg",
          "ASgBEhAKCGxhdGl0dWRlGDwgASgBEhAKCGxic19mbGFnGD0gASgIEiMKG2lz",
          "X3Rha2VfZmlyc3RfY2hhcmdlX3Jld2FyZBg+IAEoCBIaChJ0b2JlX3VuaXF1",
          "ZV9tYXN0ZXIYPyABKAgSEwoLcGF5X3pvbmVfaWQYQCABKAUSEwoLcG93ZXJf",
          "bGV2ZWwYQSABKAUSFwoPcmV3YXJkX3JldHJpZXZlGEIgASgFEiMKG25ld2Jp",
          "ZV9jaGVja19pbl9yZXdhcmRfbWFzaxhDIAEoBRIgChhidXlfdmVudHVyZV9j",
          "YXBpdGFsX3RpbWUYRCABKA0SIwobdmVudHVyZV9jYXBpdGFsX2xvZ2luX2Nv",
          "dW50GEUgASgFEiMKG3ZlbnR1cmVfY2FwaXRhbF9yZXdhcmRfbWFzaxhGIAEo",
          "DRIWCg5ncm91cF9idXlfdGltZRhHIAEoDRIdChVncm91cF9idXlfcmV3YXJk",
          "X21hc2sYSCABKA0SDQoFc3ljZWUYSSABKAUSFwoPbHVja3lfcmV3YXJkX2lk",
          "GEogASgFEhwKFGx1Y2t5X3Jld2FyZF9lbmR0aW1lGEsgASgNEh0KFWJ1eV9s",
          "ZXZlbF9yZXdhcmRfdGltZRhMIAEoDRIXCg9wb3dlcl9pbnZpc2libGUYTSAB",
          "KAgSEwoLY3JlYXRlX3RpbWUYTiABKAcSEgoKa2FybWFfbm9kZRhPIAEoBRIb",
          "ChNpc19tYXN0ZXJfZ3JhZHVhdGVkGFAgASgIEhYKDmR1bmdlb25faG9zdGVk",
          "GFEgASgIEi0KJWlzX3Rha2Vfc2luZ2xlX2FyZW5hX2ZpcnN0X3dpbl9yZXdh",
          "cmQYUiABKAgSKwojaXNfdGFrZV90ZWFtX2FyZW5hX2ZpcnN0X3dpbl9yZXdh",
          "cmQYUyABKAgSGQoRZHJhd19hdmF0YXJfY291bnQYVCABKAUSHwoXZHJhd19h",
          "dmF0YXJfcmV3YXJkX21hc2sYVSABKA1iBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::G2C_PULSE_GEMON), global::G2C_PULSE_GEMON.Parser, new[]{ "Charid", "PulseSlot", "GemSlot", "Gemid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SPELL_INFO), global::SPELL_INFO.Parser, new[]{ "Id", "Level", "BonusLevel" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TALENT_INFO), global::TALENT_INFO.Parser, new[]{ "Id", "Level" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VARIABLE_INFO), global::VARIABLE_INFO.Parser, new[]{ "Index", "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SGEM_ATTR_INFO), global::SGEM_ATTR_INFO.Parser, new[]{ "Attr", "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SGEM_INFO), global::SGEM_INFO.Parser, new[]{ "ResId", "ObjId", "Pos", "IsBind", "IsLock", "Level", "Exp", "Attr", "TradeCooldown", "IsExpensive" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::G2C_SYNC_ROLE_DATA_BEGIN), global::G2C_SYNC_ROLE_DATA_BEGIN.Parser, new[]{ "Roleid", "Rolename", "Class", "Body", "Gender", "Level", "Exp", "StoryProgress", "Frame", "ServerTime", "SpellList", "SpellSlotList", "Portrait", "PortraitBox", "ClientVar", "Spiritid", "IsSkipArrange", "ActivityReward", "EloScore", "TeamEloScore", "TalentList", "TalentSlotList", "RoleVarList", "ServerTimeZone", "IsArenaMatch", "LoginTime", "GuildId", "LastCheckInTime", "LastCheckInId", "CheckInCount", "MaxRoleLevel", "DailyLimit", "WeeklyLimit", "Sgem", "StoryReward", "RushMaxLevel", "RushDefeatTimes", "ServerMaxLevel", "ServerAvgLevel", "NextLevelDayCount", "OverflowExp", "OnlineReward", "OnlineTime", "TodayOnlineTime", "NextLevel", "LimitedTimeReward", "DungeonAccelerated", "City", "Longitude", "Latitude", "LbsFlag", "IsTakeFirstChargeReward", "TobeUniqueMaster", "PayZoneId", "PowerLevel", "RewardRetrieve", "NewbieCheckInRewardMask", "BuyVentureCapitalTime", "VentureCapitalLoginCount", "VentureCapitalRewardMask", "GroupBuyTime", "GroupBuyRewardMask", "Sycee", "LuckyRewardId", "LuckyRewardEndtime", "BuyLevelRewardTime", "PowerInvisible", "CreateTime", "KarmaNode", "IsMasterGraduated", "DungeonHosted", "IsTakeSingleArenaFirstWinReward", "IsTakeTeamArenaFirstWinReward", "DrawAvatarCount", "DrawAvatarRewardMask" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class G2C_PULSE_GEMON : pb::IMessage<G2C_PULSE_GEMON> {
  private static readonly pb::MessageParser<G2C_PULSE_GEMON> _parser = new pb::MessageParser<G2C_PULSE_GEMON>(() => new G2C_PULSE_GEMON());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<G2C_PULSE_GEMON> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public G2C_PULSE_GEMON() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public G2C_PULSE_GEMON(G2C_PULSE_GEMON other) : this() {
    charid_ = other.charid_;
    pulseSlot_ = other.pulseSlot_;
    gemSlot_ = other.gemSlot_;
    gemid_ = other.gemid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public G2C_PULSE_GEMON Clone() {
    return new G2C_PULSE_GEMON(this);
  }

  /// <summary>Field number for the "charid" field.</summary>
  public const int CharidFieldNumber = 1;
  private ulong charid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Charid {
    get { return charid_; }
    set {
      charid_ = value;
    }
  }

  /// <summary>Field number for the "pulse_slot" field.</summary>
  public const int PulseSlotFieldNumber = 2;
  private int pulseSlot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PulseSlot {
    get { return pulseSlot_; }
    set {
      pulseSlot_ = value;
    }
  }

  /// <summary>Field number for the "gem_slot" field.</summary>
  public const int GemSlotFieldNumber = 3;
  private int gemSlot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GemSlot {
    get { return gemSlot_; }
    set {
      gemSlot_ = value;
    }
  }

  /// <summary>Field number for the "gemid" field.</summary>
  public const int GemidFieldNumber = 4;
  private int gemid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gemid {
    get { return gemid_; }
    set {
      gemid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as G2C_PULSE_GEMON);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(G2C_PULSE_GEMON other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Charid != other.Charid) return false;
    if (PulseSlot != other.PulseSlot) return false;
    if (GemSlot != other.GemSlot) return false;
    if (Gemid != other.Gemid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Charid != 0UL) hash ^= Charid.GetHashCode();
    if (PulseSlot != 0) hash ^= PulseSlot.GetHashCode();
    if (GemSlot != 0) hash ^= GemSlot.GetHashCode();
    if (Gemid != 0) hash ^= Gemid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Charid != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Charid);
    }
    if (PulseSlot != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PulseSlot);
    }
    if (GemSlot != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(GemSlot);
    }
    if (Gemid != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Gemid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Charid != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
    }
    if (PulseSlot != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PulseSlot);
    }
    if (GemSlot != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GemSlot);
    }
    if (Gemid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gemid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(G2C_PULSE_GEMON other) {
    if (other == null) {
      return;
    }
    if (other.Charid != 0UL) {
      Charid = other.Charid;
    }
    if (other.PulseSlot != 0) {
      PulseSlot = other.PulseSlot;
    }
    if (other.GemSlot != 0) {
      GemSlot = other.GemSlot;
    }
    if (other.Gemid != 0) {
      Gemid = other.Gemid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Charid = input.ReadUInt64();
          break;
        }
        case 16: {
          PulseSlot = input.ReadInt32();
          break;
        }
        case 24: {
          GemSlot = input.ReadInt32();
          break;
        }
        case 32: {
          Gemid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SPELL_INFO : pb::IMessage<SPELL_INFO> {
  private static readonly pb::MessageParser<SPELL_INFO> _parser = new pb::MessageParser<SPELL_INFO>(() => new SPELL_INFO());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SPELL_INFO> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SPELL_INFO() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SPELL_INFO(SPELL_INFO other) : this() {
    id_ = other.id_;
    level_ = other.level_;
    bonusLevel_ = other.bonusLevel_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SPELL_INFO Clone() {
    return new SPELL_INFO(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "bonus_level" field.</summary>
  public const int BonusLevelFieldNumber = 3;
  private int bonusLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BonusLevel {
    get { return bonusLevel_; }
    set {
      bonusLevel_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SPELL_INFO);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SPELL_INFO other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Level != other.Level) return false;
    if (BonusLevel != other.BonusLevel) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (BonusLevel != 0) hash ^= BonusLevel.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (BonusLevel != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BonusLevel);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (BonusLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BonusLevel);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SPELL_INFO other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.BonusLevel != 0) {
      BonusLevel = other.BonusLevel;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 24: {
          BonusLevel = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TALENT_INFO : pb::IMessage<TALENT_INFO> {
  private static readonly pb::MessageParser<TALENT_INFO> _parser = new pb::MessageParser<TALENT_INFO>(() => new TALENT_INFO());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TALENT_INFO> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TALENT_INFO() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TALENT_INFO(TALENT_INFO other) : this() {
    id_ = other.id_;
    level_ = other.level_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TALENT_INFO Clone() {
    return new TALENT_INFO(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TALENT_INFO);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TALENT_INFO other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Level != other.Level) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TALENT_INFO other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VARIABLE_INFO : pb::IMessage<VARIABLE_INFO> {
  private static readonly pb::MessageParser<VARIABLE_INFO> _parser = new pb::MessageParser<VARIABLE_INFO>(() => new VARIABLE_INFO());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VARIABLE_INFO> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VARIABLE_INFO() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VARIABLE_INFO(VARIABLE_INFO other) : this() {
    index_ = other.index_;
    value_ = other.value_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VARIABLE_INFO Clone() {
    return new VARIABLE_INFO(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private int index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private int value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VARIABLE_INFO);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VARIABLE_INFO other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if (Value != other.Value) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Value != 0) hash ^= Value.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Index);
    }
    if (Value != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Value);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
    }
    if (Value != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VARIABLE_INFO other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Value != 0) {
      Value = other.Value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Index = input.ReadInt32();
          break;
        }
        case 16: {
          Value = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SGEM_ATTR_INFO : pb::IMessage<SGEM_ATTR_INFO> {
  private static readonly pb::MessageParser<SGEM_ATTR_INFO> _parser = new pb::MessageParser<SGEM_ATTR_INFO>(() => new SGEM_ATTR_INFO());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SGEM_ATTR_INFO> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SGEM_ATTR_INFO() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SGEM_ATTR_INFO(SGEM_ATTR_INFO other) : this() {
    attr_ = other.attr_;
    value_ = other.value_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SGEM_ATTR_INFO Clone() {
    return new SGEM_ATTR_INFO(this);
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 1;
  private int attr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Attr {
    get { return attr_; }
    set {
      attr_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private int value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SGEM_ATTR_INFO);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SGEM_ATTR_INFO other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Attr != other.Attr) return false;
    if (Value != other.Value) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Attr != 0) hash ^= Attr.GetHashCode();
    if (Value != 0) hash ^= Value.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Attr != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Attr);
    }
    if (Value != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Value);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Attr != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attr);
    }
    if (Value != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SGEM_ATTR_INFO other) {
    if (other == null) {
      return;
    }
    if (other.Attr != 0) {
      Attr = other.Attr;
    }
    if (other.Value != 0) {
      Value = other.Value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Attr = input.ReadInt32();
          break;
        }
        case 16: {
          Value = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SGEM_INFO : pb::IMessage<SGEM_INFO> {
  private static readonly pb::MessageParser<SGEM_INFO> _parser = new pb::MessageParser<SGEM_INFO>(() => new SGEM_INFO());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SGEM_INFO> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SGEM_INFO() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SGEM_INFO(SGEM_INFO other) : this() {
    resId_ = other.resId_;
    objId_ = other.objId_;
    pos_ = other.pos_;
    isBind_ = other.isBind_;
    isLock_ = other.isLock_;
    level_ = other.level_;
    exp_ = other.exp_;
    Attr = other.attr_ != null ? other.Attr.Clone() : null;
    tradeCooldown_ = other.tradeCooldown_;
    isExpensive_ = other.isExpensive_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SGEM_INFO Clone() {
    return new SGEM_INFO(this);
  }

  /// <summary>Field number for the "res_id" field.</summary>
  public const int ResIdFieldNumber = 1;
  private int resId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ResId {
    get { return resId_; }
    set {
      resId_ = value;
    }
  }

  /// <summary>Field number for the "obj_id" field.</summary>
  public const int ObjIdFieldNumber = 2;
  private ulong objId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong ObjId {
    get { return objId_; }
    set {
      objId_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 3;
  private int pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "is_bind" field.</summary>
  public const int IsBindFieldNumber = 4;
  private bool isBind_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsBind {
    get { return isBind_; }
    set {
      isBind_ = value;
    }
  }

  /// <summary>Field number for the "is_lock" field.</summary>
  public const int IsLockFieldNumber = 5;
  private bool isLock_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsLock {
    get { return isLock_; }
    set {
      isLock_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 6;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 7;
  private int exp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 8;
  private global::SGEM_ATTR_INFO attr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SGEM_ATTR_INFO Attr {
    get { return attr_; }
    set {
      attr_ = value;
    }
  }

  /// <summary>Field number for the "trade_cooldown" field.</summary>
  public const int TradeCooldownFieldNumber = 9;
  private uint tradeCooldown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TradeCooldown {
    get { return tradeCooldown_; }
    set {
      tradeCooldown_ = value;
    }
  }

  /// <summary>Field number for the "is_expensive" field.</summary>
  public const int IsExpensiveFieldNumber = 10;
  private bool isExpensive_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsExpensive {
    get { return isExpensive_; }
    set {
      isExpensive_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SGEM_INFO);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SGEM_INFO other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ResId != other.ResId) return false;
    if (ObjId != other.ObjId) return false;
    if (Pos != other.Pos) return false;
    if (IsBind != other.IsBind) return false;
    if (IsLock != other.IsLock) return false;
    if (Level != other.Level) return false;
    if (Exp != other.Exp) return false;
    if (!object.Equals(Attr, other.Attr)) return false;
    if (TradeCooldown != other.TradeCooldown) return false;
    if (IsExpensive != other.IsExpensive) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResId != 0) hash ^= ResId.GetHashCode();
    if (ObjId != 0UL) hash ^= ObjId.GetHashCode();
    if (Pos != 0) hash ^= Pos.GetHashCode();
    if (IsBind != false) hash ^= IsBind.GetHashCode();
    if (IsLock != false) hash ^= IsLock.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (attr_ != null) hash ^= Attr.GetHashCode();
    if (TradeCooldown != 0) hash ^= TradeCooldown.GetHashCode();
    if (IsExpensive != false) hash ^= IsExpensive.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ResId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ResId);
    }
    if (ObjId != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(ObjId);
    }
    if (Pos != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Pos);
    }
    if (IsBind != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsBind);
    }
    if (IsLock != false) {
      output.WriteRawTag(40);
      output.WriteBool(IsLock);
    }
    if (Level != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Level);
    }
    if (Exp != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Exp);
    }
    if (attr_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Attr);
    }
    if (TradeCooldown != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(TradeCooldown);
    }
    if (IsExpensive != false) {
      output.WriteRawTag(80);
      output.WriteBool(IsExpensive);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResId);
    }
    if (ObjId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjId);
    }
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    if (IsBind != false) {
      size += 1 + 1;
    }
    if (IsLock != false) {
      size += 1 + 1;
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (attr_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
    }
    if (TradeCooldown != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradeCooldown);
    }
    if (IsExpensive != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SGEM_INFO other) {
    if (other == null) {
      return;
    }
    if (other.ResId != 0) {
      ResId = other.ResId;
    }
    if (other.ObjId != 0UL) {
      ObjId = other.ObjId;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    if (other.IsBind != false) {
      IsBind = other.IsBind;
    }
    if (other.IsLock != false) {
      IsLock = other.IsLock;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.attr_ != null) {
      if (attr_ == null) {
        attr_ = new global::SGEM_ATTR_INFO();
      }
      Attr.MergeFrom(other.Attr);
    }
    if (other.TradeCooldown != 0) {
      TradeCooldown = other.TradeCooldown;
    }
    if (other.IsExpensive != false) {
      IsExpensive = other.IsExpensive;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ResId = input.ReadInt32();
          break;
        }
        case 16: {
          ObjId = input.ReadUInt64();
          break;
        }
        case 24: {
          Pos = input.ReadInt32();
          break;
        }
        case 32: {
          IsBind = input.ReadBool();
          break;
        }
        case 40: {
          IsLock = input.ReadBool();
          break;
        }
        case 48: {
          Level = input.ReadInt32();
          break;
        }
        case 56: {
          Exp = input.ReadInt32();
          break;
        }
        case 66: {
          if (attr_ == null) {
            attr_ = new global::SGEM_ATTR_INFO();
          }
          input.ReadMessage(attr_);
          break;
        }
        case 72: {
          TradeCooldown = input.ReadUInt32();
          break;
        }
        case 80: {
          IsExpensive = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class G2C_SYNC_ROLE_DATA_BEGIN : pb::IMessage<G2C_SYNC_ROLE_DATA_BEGIN> {
  private static readonly pb::MessageParser<G2C_SYNC_ROLE_DATA_BEGIN> _parser = new pb::MessageParser<G2C_SYNC_ROLE_DATA_BEGIN>(() => new G2C_SYNC_ROLE_DATA_BEGIN());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<G2C_SYNC_ROLE_DATA_BEGIN> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public G2C_SYNC_ROLE_DATA_BEGIN() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public G2C_SYNC_ROLE_DATA_BEGIN(G2C_SYNC_ROLE_DATA_BEGIN other) : this() {
    roleid_ = other.roleid_;
    rolename_ = other.rolename_;
    class_ = other.class_;
    body_ = other.body_;
    gender_ = other.gender_;
    level_ = other.level_;
    exp_ = other.exp_;
    storyProgress_ = other.storyProgress_;
    frame_ = other.frame_;
    serverTime_ = other.serverTime_;
    spellList_ = other.spellList_.Clone();
    spellSlotList_ = other.spellSlotList_;
    portrait_ = other.portrait_;
    portraitBox_ = other.portraitBox_;
    clientVar_ = other.clientVar_;
    spiritid_ = other.spiritid_;
    isSkipArrange_ = other.isSkipArrange_;
    activityReward_ = other.activityReward_;
    eloScore_ = other.eloScore_;
    teamEloScore_ = other.teamEloScore_;
    TalentList = other.talentList_ != null ? other.TalentList.Clone() : null;
    talentSlotList_ = other.talentSlotList_;
    RoleVarList = other.roleVarList_ != null ? other.RoleVarList.Clone() : null;
    serverTimeZone_ = other.serverTimeZone_;
    isArenaMatch_ = other.isArenaMatch_;
    loginTime_ = other.loginTime_;
    guildId_ = other.guildId_;
    lastCheckInTime_ = other.lastCheckInTime_;
    lastCheckInId_ = other.lastCheckInId_;
    checkInCount_ = other.checkInCount_;
    maxRoleLevel_ = other.maxRoleLevel_;
    DailyLimit = other.dailyLimit_ != null ? other.DailyLimit.Clone() : null;
    WeeklyLimit = other.weeklyLimit_ != null ? other.WeeklyLimit.Clone() : null;
    Sgem = other.sgem_ != null ? other.Sgem.Clone() : null;
    storyReward_ = other.storyReward_;
    rushMaxLevel_ = other.rushMaxLevel_;
    rushDefeatTimes_ = other.rushDefeatTimes_;
    serverMaxLevel_ = other.serverMaxLevel_;
    serverAvgLevel_ = other.serverAvgLevel_;
    nextLevelDayCount_ = other.nextLevelDayCount_;
    overflowExp_ = other.overflowExp_;
    onlineReward_ = other.onlineReward_;
    onlineTime_ = other.onlineTime_;
    todayOnlineTime_ = other.todayOnlineTime_;
    nextLevel_ = other.nextLevel_;
    limitedTimeReward_ = other.limitedTimeReward_;
    dungeonAccelerated_ = other.dungeonAccelerated_;
    city_ = other.city_;
    longitude_ = other.longitude_;
    latitude_ = other.latitude_;
    lbsFlag_ = other.lbsFlag_;
    isTakeFirstChargeReward_ = other.isTakeFirstChargeReward_;
    tobeUniqueMaster_ = other.tobeUniqueMaster_;
    payZoneId_ = other.payZoneId_;
    powerLevel_ = other.powerLevel_;
    rewardRetrieve_ = other.rewardRetrieve_;
    newbieCheckInRewardMask_ = other.newbieCheckInRewardMask_;
    buyVentureCapitalTime_ = other.buyVentureCapitalTime_;
    ventureCapitalLoginCount_ = other.ventureCapitalLoginCount_;
    ventureCapitalRewardMask_ = other.ventureCapitalRewardMask_;
    groupBuyTime_ = other.groupBuyTime_;
    groupBuyRewardMask_ = other.groupBuyRewardMask_;
    sycee_ = other.sycee_;
    luckyRewardId_ = other.luckyRewardId_;
    luckyRewardEndtime_ = other.luckyRewardEndtime_;
    buyLevelRewardTime_ = other.buyLevelRewardTime_;
    powerInvisible_ = other.powerInvisible_;
    createTime_ = other.createTime_;
    karmaNode_ = other.karmaNode_;
    isMasterGraduated_ = other.isMasterGraduated_;
    dungeonHosted_ = other.dungeonHosted_;
    isTakeSingleArenaFirstWinReward_ = other.isTakeSingleArenaFirstWinReward_;
    isTakeTeamArenaFirstWinReward_ = other.isTakeTeamArenaFirstWinReward_;
    drawAvatarCount_ = other.drawAvatarCount_;
    drawAvatarRewardMask_ = other.drawAvatarRewardMask_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public G2C_SYNC_ROLE_DATA_BEGIN Clone() {
    return new G2C_SYNC_ROLE_DATA_BEGIN(this);
  }

  /// <summary>Field number for the "roleid" field.</summary>
  public const int RoleidFieldNumber = 1;
  private ulong roleid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Roleid {
    get { return roleid_; }
    set {
      roleid_ = value;
    }
  }

  /// <summary>Field number for the "rolename" field.</summary>
  public const int RolenameFieldNumber = 2;
  private string rolename_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Rolename {
    get { return rolename_; }
    set {
      rolename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "class" field.</summary>
  public const int ClassFieldNumber = 3;
  private int class_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Class {
    get { return class_; }
    set {
      class_ = value;
    }
  }

  /// <summary>Field number for the "body" field.</summary>
  public const int BodyFieldNumber = 4;
  private int body_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Body {
    get { return body_; }
    set {
      body_ = value;
    }
  }

  /// <summary>Field number for the "gender" field.</summary>
  public const int GenderFieldNumber = 5;
  private int gender_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gender {
    get { return gender_; }
    set {
      gender_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 6;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 7;
  private int exp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "story_progress" field.</summary>
  public const int StoryProgressFieldNumber = 8;
  private int storyProgress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StoryProgress {
    get { return storyProgress_; }
    set {
      storyProgress_ = value;
    }
  }

  /// <summary>Field number for the "frame" field.</summary>
  public const int FrameFieldNumber = 9;
  private int frame_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Frame {
    get { return frame_; }
    set {
      frame_ = value;
    }
  }

  /// <summary>Field number for the "server_time" field.</summary>
  public const int ServerTimeFieldNumber = 10;
  private uint serverTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ServerTime {
    get { return serverTime_; }
    set {
      serverTime_ = value;
    }
  }

  /// <summary>Field number for the "spell_list" field.</summary>
  public const int SpellListFieldNumber = 11;
  private static readonly pb::FieldCodec<global::SPELL_INFO> _repeated_spellList_codec
      = pb::FieldCodec.ForMessage(90, global::SPELL_INFO.Parser);
  private readonly pbc::RepeatedField<global::SPELL_INFO> spellList_ = new pbc::RepeatedField<global::SPELL_INFO>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SPELL_INFO> SpellList {
    get { return spellList_; }
  }

  /// <summary>Field number for the "spell_slot_list" field.</summary>
  public const int SpellSlotListFieldNumber = 12;
  private int spellSlotList_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SpellSlotList {
    get { return spellSlotList_; }
    set {
      spellSlotList_ = value;
    }
  }

  /// <summary>Field number for the "portrait" field.</summary>
  public const int PortraitFieldNumber = 13;
  private int portrait_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Portrait {
    get { return portrait_; }
    set {
      portrait_ = value;
    }
  }

  /// <summary>Field number for the "portrait_box" field.</summary>
  public const int PortraitBoxFieldNumber = 14;
  private int portraitBox_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PortraitBox {
    get { return portraitBox_; }
    set {
      portraitBox_ = value;
    }
  }

  /// <summary>Field number for the "client_var" field.</summary>
  public const int ClientVarFieldNumber = 17;
  private int clientVar_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientVar {
    get { return clientVar_; }
    set {
      clientVar_ = value;
    }
  }

  /// <summary>Field number for the "spiritid" field.</summary>
  public const int SpiritidFieldNumber = 25;
  private ulong spiritid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Spiritid {
    get { return spiritid_; }
    set {
      spiritid_ = value;
    }
  }

  /// <summary>Field number for the "is_skip_arrange" field.</summary>
  public const int IsSkipArrangeFieldNumber = 26;
  private bool isSkipArrange_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsSkipArrange {
    get { return isSkipArrange_; }
    set {
      isSkipArrange_ = value;
    }
  }

  /// <summary>Field number for the "activity_reward" field.</summary>
  public const int ActivityRewardFieldNumber = 27;
  private uint activityReward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ActivityReward {
    get { return activityReward_; }
    set {
      activityReward_ = value;
    }
  }

  /// <summary>Field number for the "elo_score" field.</summary>
  public const int EloScoreFieldNumber = 28;
  private int eloScore_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EloScore {
    get { return eloScore_; }
    set {
      eloScore_ = value;
    }
  }

  /// <summary>Field number for the "team_elo_score" field.</summary>
  public const int TeamEloScoreFieldNumber = 29;
  private int teamEloScore_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TeamEloScore {
    get { return teamEloScore_; }
    set {
      teamEloScore_ = value;
    }
  }

  /// <summary>Field number for the "talent_list" field.</summary>
  public const int TalentListFieldNumber = 30;
  private global::TALENT_INFO talentList_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TALENT_INFO TalentList {
    get { return talentList_; }
    set {
      talentList_ = value;
    }
  }

  /// <summary>Field number for the "talent_slot_list" field.</summary>
  public const int TalentSlotListFieldNumber = 31;
  private int talentSlotList_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TalentSlotList {
    get { return talentSlotList_; }
    set {
      talentSlotList_ = value;
    }
  }

  /// <summary>Field number for the "role_var_list" field.</summary>
  public const int RoleVarListFieldNumber = 32;
  private global::VARIABLE_INFO roleVarList_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VARIABLE_INFO RoleVarList {
    get { return roleVarList_; }
    set {
      roleVarList_ = value;
    }
  }

  /// <summary>Field number for the "server_time_zone" field.</summary>
  public const int ServerTimeZoneFieldNumber = 33;
  private int serverTimeZone_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ServerTimeZone {
    get { return serverTimeZone_; }
    set {
      serverTimeZone_ = value;
    }
  }

  /// <summary>Field number for the "is_arena_match" field.</summary>
  public const int IsArenaMatchFieldNumber = 34;
  private bool isArenaMatch_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsArenaMatch {
    get { return isArenaMatch_; }
    set {
      isArenaMatch_ = value;
    }
  }

  /// <summary>Field number for the "login_time" field.</summary>
  public const int LoginTimeFieldNumber = 35;
  private uint loginTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LoginTime {
    get { return loginTime_; }
    set {
      loginTime_ = value;
    }
  }

  /// <summary>Field number for the "guild_id" field.</summary>
  public const int GuildIdFieldNumber = 36;
  private ulong guildId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong GuildId {
    get { return guildId_; }
    set {
      guildId_ = value;
    }
  }

  /// <summary>Field number for the "last_check_in_time" field.</summary>
  public const int LastCheckInTimeFieldNumber = 37;
  private uint lastCheckInTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LastCheckInTime {
    get { return lastCheckInTime_; }
    set {
      lastCheckInTime_ = value;
    }
  }

  /// <summary>Field number for the "last_check_in_id" field.</summary>
  public const int LastCheckInIdFieldNumber = 38;
  private uint lastCheckInId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LastCheckInId {
    get { return lastCheckInId_; }
    set {
      lastCheckInId_ = value;
    }
  }

  /// <summary>Field number for the "check_in_count" field.</summary>
  public const int CheckInCountFieldNumber = 39;
  private uint checkInCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CheckInCount {
    get { return checkInCount_; }
    set {
      checkInCount_ = value;
    }
  }

  /// <summary>Field number for the "max_role_level" field.</summary>
  public const int MaxRoleLevelFieldNumber = 40;
  private uint maxRoleLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxRoleLevel {
    get { return maxRoleLevel_; }
    set {
      maxRoleLevel_ = value;
    }
  }

  /// <summary>Field number for the "daily_limit" field.</summary>
  public const int DailyLimitFieldNumber = 41;
  private global::VARIABLE_INFO dailyLimit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VARIABLE_INFO DailyLimit {
    get { return dailyLimit_; }
    set {
      dailyLimit_ = value;
    }
  }

  /// <summary>Field number for the "weekly_limit" field.</summary>
  public const int WeeklyLimitFieldNumber = 42;
  private global::VARIABLE_INFO weeklyLimit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VARIABLE_INFO WeeklyLimit {
    get { return weeklyLimit_; }
    set {
      weeklyLimit_ = value;
    }
  }

  /// <summary>Field number for the "sgem" field.</summary>
  public const int SgemFieldNumber = 43;
  private global::SGEM_INFO sgem_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SGEM_INFO Sgem {
    get { return sgem_; }
    set {
      sgem_ = value;
    }
  }

  /// <summary>Field number for the "story_reward" field.</summary>
  public const int StoryRewardFieldNumber = 44;
  private uint storyReward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StoryReward {
    get { return storyReward_; }
    set {
      storyReward_ = value;
    }
  }

  /// <summary>Field number for the "rush_max_level" field.</summary>
  public const int RushMaxLevelFieldNumber = 45;
  private int rushMaxLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RushMaxLevel {
    get { return rushMaxLevel_; }
    set {
      rushMaxLevel_ = value;
    }
  }

  /// <summary>Field number for the "rush_defeat_times" field.</summary>
  public const int RushDefeatTimesFieldNumber = 46;
  private int rushDefeatTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RushDefeatTimes {
    get { return rushDefeatTimes_; }
    set {
      rushDefeatTimes_ = value;
    }
  }

  /// <summary>Field number for the "server_max_level" field.</summary>
  public const int ServerMaxLevelFieldNumber = 47;
  private int serverMaxLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ServerMaxLevel {
    get { return serverMaxLevel_; }
    set {
      serverMaxLevel_ = value;
    }
  }

  /// <summary>Field number for the "server_avg_level" field.</summary>
  public const int ServerAvgLevelFieldNumber = 48;
  private int serverAvgLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ServerAvgLevel {
    get { return serverAvgLevel_; }
    set {
      serverAvgLevel_ = value;
    }
  }

  /// <summary>Field number for the "next_level_day_count" field.</summary>
  public const int NextLevelDayCountFieldNumber = 49;
  private int nextLevelDayCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NextLevelDayCount {
    get { return nextLevelDayCount_; }
    set {
      nextLevelDayCount_ = value;
    }
  }

  /// <summary>Field number for the "overflow_exp" field.</summary>
  public const int OverflowExpFieldNumber = 50;
  private long overflowExp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long OverflowExp {
    get { return overflowExp_; }
    set {
      overflowExp_ = value;
    }
  }

  /// <summary>Field number for the "online_reward" field.</summary>
  public const int OnlineRewardFieldNumber = 51;
  private uint onlineReward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint OnlineReward {
    get { return onlineReward_; }
    set {
      onlineReward_ = value;
    }
  }

  /// <summary>Field number for the "online_time" field.</summary>
  public const int OnlineTimeFieldNumber = 52;
  private uint onlineTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint OnlineTime {
    get { return onlineTime_; }
    set {
      onlineTime_ = value;
    }
  }

  /// <summary>Field number for the "today_online_time" field.</summary>
  public const int TodayOnlineTimeFieldNumber = 53;
  private uint todayOnlineTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TodayOnlineTime {
    get { return todayOnlineTime_; }
    set {
      todayOnlineTime_ = value;
    }
  }

  /// <summary>Field number for the "next_level" field.</summary>
  public const int NextLevelFieldNumber = 54;
  private int nextLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NextLevel {
    get { return nextLevel_; }
    set {
      nextLevel_ = value;
    }
  }

  /// <summary>Field number for the "limited_time_reward" field.</summary>
  public const int LimitedTimeRewardFieldNumber = 55;
  private uint limitedTimeReward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LimitedTimeReward {
    get { return limitedTimeReward_; }
    set {
      limitedTimeReward_ = value;
    }
  }

  /// <summary>Field number for the "dungeon_accelerated" field.</summary>
  public const int DungeonAcceleratedFieldNumber = 57;
  private bool dungeonAccelerated_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DungeonAccelerated {
    get { return dungeonAccelerated_; }
    set {
      dungeonAccelerated_ = value;
    }
  }

  /// <summary>Field number for the "city" field.</summary>
  public const int CityFieldNumber = 58;
  private int city_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int City {
    get { return city_; }
    set {
      city_ = value;
    }
  }

  /// <summary>Field number for the "longitude" field.</summary>
  public const int LongitudeFieldNumber = 59;
  private double longitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Longitude {
    get { return longitude_; }
    set {
      longitude_ = value;
    }
  }

  /// <summary>Field number for the "latitude" field.</summary>
  public const int LatitudeFieldNumber = 60;
  private double latitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Latitude {
    get { return latitude_; }
    set {
      latitude_ = value;
    }
  }

  /// <summary>Field number for the "lbs_flag" field.</summary>
  public const int LbsFlagFieldNumber = 61;
  private bool lbsFlag_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool LbsFlag {
    get { return lbsFlag_; }
    set {
      lbsFlag_ = value;
    }
  }

  /// <summary>Field number for the "is_take_first_charge_reward" field.</summary>
  public const int IsTakeFirstChargeRewardFieldNumber = 62;
  private bool isTakeFirstChargeReward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTakeFirstChargeReward {
    get { return isTakeFirstChargeReward_; }
    set {
      isTakeFirstChargeReward_ = value;
    }
  }

  /// <summary>Field number for the "tobe_unique_master" field.</summary>
  public const int TobeUniqueMasterFieldNumber = 63;
  private bool tobeUniqueMaster_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool TobeUniqueMaster {
    get { return tobeUniqueMaster_; }
    set {
      tobeUniqueMaster_ = value;
    }
  }

  /// <summary>Field number for the "pay_zone_id" field.</summary>
  public const int PayZoneIdFieldNumber = 64;
  private int payZoneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PayZoneId {
    get { return payZoneId_; }
    set {
      payZoneId_ = value;
    }
  }

  /// <summary>Field number for the "power_level" field.</summary>
  public const int PowerLevelFieldNumber = 65;
  private int powerLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PowerLevel {
    get { return powerLevel_; }
    set {
      powerLevel_ = value;
    }
  }

  /// <summary>Field number for the "reward_retrieve" field.</summary>
  public const int RewardRetrieveFieldNumber = 66;
  private int rewardRetrieve_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RewardRetrieve {
    get { return rewardRetrieve_; }
    set {
      rewardRetrieve_ = value;
    }
  }

  /// <summary>Field number for the "newbie_check_in_reward_mask" field.</summary>
  public const int NewbieCheckInRewardMaskFieldNumber = 67;
  private int newbieCheckInRewardMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NewbieCheckInRewardMask {
    get { return newbieCheckInRewardMask_; }
    set {
      newbieCheckInRewardMask_ = value;
    }
  }

  /// <summary>Field number for the "buy_venture_capital_time" field.</summary>
  public const int BuyVentureCapitalTimeFieldNumber = 68;
  private uint buyVentureCapitalTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BuyVentureCapitalTime {
    get { return buyVentureCapitalTime_; }
    set {
      buyVentureCapitalTime_ = value;
    }
  }

  /// <summary>Field number for the "venture_capital_login_count" field.</summary>
  public const int VentureCapitalLoginCountFieldNumber = 69;
  private int ventureCapitalLoginCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VentureCapitalLoginCount {
    get { return ventureCapitalLoginCount_; }
    set {
      ventureCapitalLoginCount_ = value;
    }
  }

  /// <summary>Field number for the "venture_capital_reward_mask" field.</summary>
  public const int VentureCapitalRewardMaskFieldNumber = 70;
  private uint ventureCapitalRewardMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint VentureCapitalRewardMask {
    get { return ventureCapitalRewardMask_; }
    set {
      ventureCapitalRewardMask_ = value;
    }
  }

  /// <summary>Field number for the "group_buy_time" field.</summary>
  public const int GroupBuyTimeFieldNumber = 71;
  private uint groupBuyTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GroupBuyTime {
    get { return groupBuyTime_; }
    set {
      groupBuyTime_ = value;
    }
  }

  /// <summary>Field number for the "group_buy_reward_mask" field.</summary>
  public const int GroupBuyRewardMaskFieldNumber = 72;
  private uint groupBuyRewardMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GroupBuyRewardMask {
    get { return groupBuyRewardMask_; }
    set {
      groupBuyRewardMask_ = value;
    }
  }

  /// <summary>Field number for the "sycee" field.</summary>
  public const int SyceeFieldNumber = 73;
  private int sycee_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sycee {
    get { return sycee_; }
    set {
      sycee_ = value;
    }
  }

  /// <summary>Field number for the "lucky_reward_id" field.</summary>
  public const int LuckyRewardIdFieldNumber = 74;
  private int luckyRewardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LuckyRewardId {
    get { return luckyRewardId_; }
    set {
      luckyRewardId_ = value;
    }
  }

  /// <summary>Field number for the "lucky_reward_endtime" field.</summary>
  public const int LuckyRewardEndtimeFieldNumber = 75;
  private uint luckyRewardEndtime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LuckyRewardEndtime {
    get { return luckyRewardEndtime_; }
    set {
      luckyRewardEndtime_ = value;
    }
  }

  /// <summary>Field number for the "buy_level_reward_time" field.</summary>
  public const int BuyLevelRewardTimeFieldNumber = 76;
  private uint buyLevelRewardTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BuyLevelRewardTime {
    get { return buyLevelRewardTime_; }
    set {
      buyLevelRewardTime_ = value;
    }
  }

  /// <summary>Field number for the "power_invisible" field.</summary>
  public const int PowerInvisibleFieldNumber = 77;
  private bool powerInvisible_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool PowerInvisible {
    get { return powerInvisible_; }
    set {
      powerInvisible_ = value;
    }
  }

  /// <summary>Field number for the "create_time" field.</summary>
  public const int CreateTimeFieldNumber = 78;
  private uint createTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CreateTime {
    get { return createTime_; }
    set {
      createTime_ = value;
    }
  }

  /// <summary>Field number for the "karma_node" field.</summary>
  public const int KarmaNodeFieldNumber = 79;
  private int karmaNode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int KarmaNode {
    get { return karmaNode_; }
    set {
      karmaNode_ = value;
    }
  }

  /// <summary>Field number for the "is_master_graduated" field.</summary>
  public const int IsMasterGraduatedFieldNumber = 80;
  private bool isMasterGraduated_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsMasterGraduated {
    get { return isMasterGraduated_; }
    set {
      isMasterGraduated_ = value;
    }
  }

  /// <summary>Field number for the "dungeon_hosted" field.</summary>
  public const int DungeonHostedFieldNumber = 81;
  private bool dungeonHosted_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DungeonHosted {
    get { return dungeonHosted_; }
    set {
      dungeonHosted_ = value;
    }
  }

  /// <summary>Field number for the "is_take_single_arena_first_win_reward" field.</summary>
  public const int IsTakeSingleArenaFirstWinRewardFieldNumber = 82;
  private bool isTakeSingleArenaFirstWinReward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTakeSingleArenaFirstWinReward {
    get { return isTakeSingleArenaFirstWinReward_; }
    set {
      isTakeSingleArenaFirstWinReward_ = value;
    }
  }

  /// <summary>Field number for the "is_take_team_arena_first_win_reward" field.</summary>
  public const int IsTakeTeamArenaFirstWinRewardFieldNumber = 83;
  private bool isTakeTeamArenaFirstWinReward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTakeTeamArenaFirstWinReward {
    get { return isTakeTeamArenaFirstWinReward_; }
    set {
      isTakeTeamArenaFirstWinReward_ = value;
    }
  }

  /// <summary>Field number for the "draw_avatar_count" field.</summary>
  public const int DrawAvatarCountFieldNumber = 84;
  private int drawAvatarCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DrawAvatarCount {
    get { return drawAvatarCount_; }
    set {
      drawAvatarCount_ = value;
    }
  }

  /// <summary>Field number for the "draw_avatar_reward_mask" field.</summary>
  public const int DrawAvatarRewardMaskFieldNumber = 85;
  private uint drawAvatarRewardMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DrawAvatarRewardMask {
    get { return drawAvatarRewardMask_; }
    set {
      drawAvatarRewardMask_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as G2C_SYNC_ROLE_DATA_BEGIN);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(G2C_SYNC_ROLE_DATA_BEGIN other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Roleid != other.Roleid) return false;
    if (Rolename != other.Rolename) return false;
    if (Class != other.Class) return false;
    if (Body != other.Body) return false;
    if (Gender != other.Gender) return false;
    if (Level != other.Level) return false;
    if (Exp != other.Exp) return false;
    if (StoryProgress != other.StoryProgress) return false;
    if (Frame != other.Frame) return false;
    if (ServerTime != other.ServerTime) return false;
    if(!spellList_.Equals(other.spellList_)) return false;
    if (SpellSlotList != other.SpellSlotList) return false;
    if (Portrait != other.Portrait) return false;
    if (PortraitBox != other.PortraitBox) return false;
    if (ClientVar != other.ClientVar) return false;
    if (Spiritid != other.Spiritid) return false;
    if (IsSkipArrange != other.IsSkipArrange) return false;
    if (ActivityReward != other.ActivityReward) return false;
    if (EloScore != other.EloScore) return false;
    if (TeamEloScore != other.TeamEloScore) return false;
    if (!object.Equals(TalentList, other.TalentList)) return false;
    if (TalentSlotList != other.TalentSlotList) return false;
    if (!object.Equals(RoleVarList, other.RoleVarList)) return false;
    if (ServerTimeZone != other.ServerTimeZone) return false;
    if (IsArenaMatch != other.IsArenaMatch) return false;
    if (LoginTime != other.LoginTime) return false;
    if (GuildId != other.GuildId) return false;
    if (LastCheckInTime != other.LastCheckInTime) return false;
    if (LastCheckInId != other.LastCheckInId) return false;
    if (CheckInCount != other.CheckInCount) return false;
    if (MaxRoleLevel != other.MaxRoleLevel) return false;
    if (!object.Equals(DailyLimit, other.DailyLimit)) return false;
    if (!object.Equals(WeeklyLimit, other.WeeklyLimit)) return false;
    if (!object.Equals(Sgem, other.Sgem)) return false;
    if (StoryReward != other.StoryReward) return false;
    if (RushMaxLevel != other.RushMaxLevel) return false;
    if (RushDefeatTimes != other.RushDefeatTimes) return false;
    if (ServerMaxLevel != other.ServerMaxLevel) return false;
    if (ServerAvgLevel != other.ServerAvgLevel) return false;
    if (NextLevelDayCount != other.NextLevelDayCount) return false;
    if (OverflowExp != other.OverflowExp) return false;
    if (OnlineReward != other.OnlineReward) return false;
    if (OnlineTime != other.OnlineTime) return false;
    if (TodayOnlineTime != other.TodayOnlineTime) return false;
    if (NextLevel != other.NextLevel) return false;
    if (LimitedTimeReward != other.LimitedTimeReward) return false;
    if (DungeonAccelerated != other.DungeonAccelerated) return false;
    if (City != other.City) return false;
    if (Longitude != other.Longitude) return false;
    if (Latitude != other.Latitude) return false;
    if (LbsFlag != other.LbsFlag) return false;
    if (IsTakeFirstChargeReward != other.IsTakeFirstChargeReward) return false;
    if (TobeUniqueMaster != other.TobeUniqueMaster) return false;
    if (PayZoneId != other.PayZoneId) return false;
    if (PowerLevel != other.PowerLevel) return false;
    if (RewardRetrieve != other.RewardRetrieve) return false;
    if (NewbieCheckInRewardMask != other.NewbieCheckInRewardMask) return false;
    if (BuyVentureCapitalTime != other.BuyVentureCapitalTime) return false;
    if (VentureCapitalLoginCount != other.VentureCapitalLoginCount) return false;
    if (VentureCapitalRewardMask != other.VentureCapitalRewardMask) return false;
    if (GroupBuyTime != other.GroupBuyTime) return false;
    if (GroupBuyRewardMask != other.GroupBuyRewardMask) return false;
    if (Sycee != other.Sycee) return false;
    if (LuckyRewardId != other.LuckyRewardId) return false;
    if (LuckyRewardEndtime != other.LuckyRewardEndtime) return false;
    if (BuyLevelRewardTime != other.BuyLevelRewardTime) return false;
    if (PowerInvisible != other.PowerInvisible) return false;
    if (CreateTime != other.CreateTime) return false;
    if (KarmaNode != other.KarmaNode) return false;
    if (IsMasterGraduated != other.IsMasterGraduated) return false;
    if (DungeonHosted != other.DungeonHosted) return false;
    if (IsTakeSingleArenaFirstWinReward != other.IsTakeSingleArenaFirstWinReward) return false;
    if (IsTakeTeamArenaFirstWinReward != other.IsTakeTeamArenaFirstWinReward) return false;
    if (DrawAvatarCount != other.DrawAvatarCount) return false;
    if (DrawAvatarRewardMask != other.DrawAvatarRewardMask) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Roleid != 0UL) hash ^= Roleid.GetHashCode();
    if (Rolename.Length != 0) hash ^= Rolename.GetHashCode();
    if (Class != 0) hash ^= Class.GetHashCode();
    if (Body != 0) hash ^= Body.GetHashCode();
    if (Gender != 0) hash ^= Gender.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (StoryProgress != 0) hash ^= StoryProgress.GetHashCode();
    if (Frame != 0) hash ^= Frame.GetHashCode();
    if (ServerTime != 0) hash ^= ServerTime.GetHashCode();
    hash ^= spellList_.GetHashCode();
    if (SpellSlotList != 0) hash ^= SpellSlotList.GetHashCode();
    if (Portrait != 0) hash ^= Portrait.GetHashCode();
    if (PortraitBox != 0) hash ^= PortraitBox.GetHashCode();
    if (ClientVar != 0) hash ^= ClientVar.GetHashCode();
    if (Spiritid != 0UL) hash ^= Spiritid.GetHashCode();
    if (IsSkipArrange != false) hash ^= IsSkipArrange.GetHashCode();
    if (ActivityReward != 0) hash ^= ActivityReward.GetHashCode();
    if (EloScore != 0) hash ^= EloScore.GetHashCode();
    if (TeamEloScore != 0) hash ^= TeamEloScore.GetHashCode();
    if (talentList_ != null) hash ^= TalentList.GetHashCode();
    if (TalentSlotList != 0) hash ^= TalentSlotList.GetHashCode();
    if (roleVarList_ != null) hash ^= RoleVarList.GetHashCode();
    if (ServerTimeZone != 0) hash ^= ServerTimeZone.GetHashCode();
    if (IsArenaMatch != false) hash ^= IsArenaMatch.GetHashCode();
    if (LoginTime != 0) hash ^= LoginTime.GetHashCode();
    if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
    if (LastCheckInTime != 0) hash ^= LastCheckInTime.GetHashCode();
    if (LastCheckInId != 0) hash ^= LastCheckInId.GetHashCode();
    if (CheckInCount != 0) hash ^= CheckInCount.GetHashCode();
    if (MaxRoleLevel != 0) hash ^= MaxRoleLevel.GetHashCode();
    if (dailyLimit_ != null) hash ^= DailyLimit.GetHashCode();
    if (weeklyLimit_ != null) hash ^= WeeklyLimit.GetHashCode();
    if (sgem_ != null) hash ^= Sgem.GetHashCode();
    if (StoryReward != 0) hash ^= StoryReward.GetHashCode();
    if (RushMaxLevel != 0) hash ^= RushMaxLevel.GetHashCode();
    if (RushDefeatTimes != 0) hash ^= RushDefeatTimes.GetHashCode();
    if (ServerMaxLevel != 0) hash ^= ServerMaxLevel.GetHashCode();
    if (ServerAvgLevel != 0) hash ^= ServerAvgLevel.GetHashCode();
    if (NextLevelDayCount != 0) hash ^= NextLevelDayCount.GetHashCode();
    if (OverflowExp != 0L) hash ^= OverflowExp.GetHashCode();
    if (OnlineReward != 0) hash ^= OnlineReward.GetHashCode();
    if (OnlineTime != 0) hash ^= OnlineTime.GetHashCode();
    if (TodayOnlineTime != 0) hash ^= TodayOnlineTime.GetHashCode();
    if (NextLevel != 0) hash ^= NextLevel.GetHashCode();
    if (LimitedTimeReward != 0) hash ^= LimitedTimeReward.GetHashCode();
    if (DungeonAccelerated != false) hash ^= DungeonAccelerated.GetHashCode();
    if (City != 0) hash ^= City.GetHashCode();
    if (Longitude != 0D) hash ^= Longitude.GetHashCode();
    if (Latitude != 0D) hash ^= Latitude.GetHashCode();
    if (LbsFlag != false) hash ^= LbsFlag.GetHashCode();
    if (IsTakeFirstChargeReward != false) hash ^= IsTakeFirstChargeReward.GetHashCode();
    if (TobeUniqueMaster != false) hash ^= TobeUniqueMaster.GetHashCode();
    if (PayZoneId != 0) hash ^= PayZoneId.GetHashCode();
    if (PowerLevel != 0) hash ^= PowerLevel.GetHashCode();
    if (RewardRetrieve != 0) hash ^= RewardRetrieve.GetHashCode();
    if (NewbieCheckInRewardMask != 0) hash ^= NewbieCheckInRewardMask.GetHashCode();
    if (BuyVentureCapitalTime != 0) hash ^= BuyVentureCapitalTime.GetHashCode();
    if (VentureCapitalLoginCount != 0) hash ^= VentureCapitalLoginCount.GetHashCode();
    if (VentureCapitalRewardMask != 0) hash ^= VentureCapitalRewardMask.GetHashCode();
    if (GroupBuyTime != 0) hash ^= GroupBuyTime.GetHashCode();
    if (GroupBuyRewardMask != 0) hash ^= GroupBuyRewardMask.GetHashCode();
    if (Sycee != 0) hash ^= Sycee.GetHashCode();
    if (LuckyRewardId != 0) hash ^= LuckyRewardId.GetHashCode();
    if (LuckyRewardEndtime != 0) hash ^= LuckyRewardEndtime.GetHashCode();
    if (BuyLevelRewardTime != 0) hash ^= BuyLevelRewardTime.GetHashCode();
    if (PowerInvisible != false) hash ^= PowerInvisible.GetHashCode();
    if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
    if (KarmaNode != 0) hash ^= KarmaNode.GetHashCode();
    if (IsMasterGraduated != false) hash ^= IsMasterGraduated.GetHashCode();
    if (DungeonHosted != false) hash ^= DungeonHosted.GetHashCode();
    if (IsTakeSingleArenaFirstWinReward != false) hash ^= IsTakeSingleArenaFirstWinReward.GetHashCode();
    if (IsTakeTeamArenaFirstWinReward != false) hash ^= IsTakeTeamArenaFirstWinReward.GetHashCode();
    if (DrawAvatarCount != 0) hash ^= DrawAvatarCount.GetHashCode();
    if (DrawAvatarRewardMask != 0) hash ^= DrawAvatarRewardMask.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Roleid != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Roleid);
    }
    if (Rolename.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Rolename);
    }
    if (Class != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Class);
    }
    if (Body != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Body);
    }
    if (Gender != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Gender);
    }
    if (Level != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Level);
    }
    if (Exp != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Exp);
    }
    if (StoryProgress != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(StoryProgress);
    }
    if (Frame != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Frame);
    }
    if (ServerTime != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(ServerTime);
    }
    spellList_.WriteTo(output, _repeated_spellList_codec);
    if (SpellSlotList != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(SpellSlotList);
    }
    if (Portrait != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(Portrait);
    }
    if (PortraitBox != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(PortraitBox);
    }
    if (ClientVar != 0) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(ClientVar);
    }
    if (Spiritid != 0UL) {
      output.WriteRawTag(200, 1);
      output.WriteUInt64(Spiritid);
    }
    if (IsSkipArrange != false) {
      output.WriteRawTag(208, 1);
      output.WriteBool(IsSkipArrange);
    }
    if (ActivityReward != 0) {
      output.WriteRawTag(216, 1);
      output.WriteUInt32(ActivityReward);
    }
    if (EloScore != 0) {
      output.WriteRawTag(224, 1);
      output.WriteInt32(EloScore);
    }
    if (TeamEloScore != 0) {
      output.WriteRawTag(232, 1);
      output.WriteInt32(TeamEloScore);
    }
    if (talentList_ != null) {
      output.WriteRawTag(242, 1);
      output.WriteMessage(TalentList);
    }
    if (TalentSlotList != 0) {
      output.WriteRawTag(248, 1);
      output.WriteInt32(TalentSlotList);
    }
    if (roleVarList_ != null) {
      output.WriteRawTag(130, 2);
      output.WriteMessage(RoleVarList);
    }
    if (ServerTimeZone != 0) {
      output.WriteRawTag(136, 2);
      output.WriteInt32(ServerTimeZone);
    }
    if (IsArenaMatch != false) {
      output.WriteRawTag(144, 2);
      output.WriteBool(IsArenaMatch);
    }
    if (LoginTime != 0) {
      output.WriteRawTag(152, 2);
      output.WriteUInt32(LoginTime);
    }
    if (GuildId != 0UL) {
      output.WriteRawTag(160, 2);
      output.WriteUInt64(GuildId);
    }
    if (LastCheckInTime != 0) {
      output.WriteRawTag(168, 2);
      output.WriteUInt32(LastCheckInTime);
    }
    if (LastCheckInId != 0) {
      output.WriteRawTag(176, 2);
      output.WriteUInt32(LastCheckInId);
    }
    if (CheckInCount != 0) {
      output.WriteRawTag(184, 2);
      output.WriteUInt32(CheckInCount);
    }
    if (MaxRoleLevel != 0) {
      output.WriteRawTag(192, 2);
      output.WriteUInt32(MaxRoleLevel);
    }
    if (dailyLimit_ != null) {
      output.WriteRawTag(202, 2);
      output.WriteMessage(DailyLimit);
    }
    if (weeklyLimit_ != null) {
      output.WriteRawTag(210, 2);
      output.WriteMessage(WeeklyLimit);
    }
    if (sgem_ != null) {
      output.WriteRawTag(218, 2);
      output.WriteMessage(Sgem);
    }
    if (StoryReward != 0) {
      output.WriteRawTag(224, 2);
      output.WriteUInt32(StoryReward);
    }
    if (RushMaxLevel != 0) {
      output.WriteRawTag(232, 2);
      output.WriteInt32(RushMaxLevel);
    }
    if (RushDefeatTimes != 0) {
      output.WriteRawTag(240, 2);
      output.WriteInt32(RushDefeatTimes);
    }
    if (ServerMaxLevel != 0) {
      output.WriteRawTag(248, 2);
      output.WriteInt32(ServerMaxLevel);
    }
    if (ServerAvgLevel != 0) {
      output.WriteRawTag(128, 3);
      output.WriteInt32(ServerAvgLevel);
    }
    if (NextLevelDayCount != 0) {
      output.WriteRawTag(136, 3);
      output.WriteInt32(NextLevelDayCount);
    }
    if (OverflowExp != 0L) {
      output.WriteRawTag(144, 3);
      output.WriteInt64(OverflowExp);
    }
    if (OnlineReward != 0) {
      output.WriteRawTag(152, 3);
      output.WriteUInt32(OnlineReward);
    }
    if (OnlineTime != 0) {
      output.WriteRawTag(160, 3);
      output.WriteUInt32(OnlineTime);
    }
    if (TodayOnlineTime != 0) {
      output.WriteRawTag(168, 3);
      output.WriteUInt32(TodayOnlineTime);
    }
    if (NextLevel != 0) {
      output.WriteRawTag(176, 3);
      output.WriteInt32(NextLevel);
    }
    if (LimitedTimeReward != 0) {
      output.WriteRawTag(184, 3);
      output.WriteUInt32(LimitedTimeReward);
    }
    if (DungeonAccelerated != false) {
      output.WriteRawTag(200, 3);
      output.WriteBool(DungeonAccelerated);
    }
    if (City != 0) {
      output.WriteRawTag(208, 3);
      output.WriteInt32(City);
    }
    if (Longitude != 0D) {
      output.WriteRawTag(217, 3);
      output.WriteDouble(Longitude);
    }
    if (Latitude != 0D) {
      output.WriteRawTag(225, 3);
      output.WriteDouble(Latitude);
    }
    if (LbsFlag != false) {
      output.WriteRawTag(232, 3);
      output.WriteBool(LbsFlag);
    }
    if (IsTakeFirstChargeReward != false) {
      output.WriteRawTag(240, 3);
      output.WriteBool(IsTakeFirstChargeReward);
    }
    if (TobeUniqueMaster != false) {
      output.WriteRawTag(248, 3);
      output.WriteBool(TobeUniqueMaster);
    }
    if (PayZoneId != 0) {
      output.WriteRawTag(128, 4);
      output.WriteInt32(PayZoneId);
    }
    if (PowerLevel != 0) {
      output.WriteRawTag(136, 4);
      output.WriteInt32(PowerLevel);
    }
    if (RewardRetrieve != 0) {
      output.WriteRawTag(144, 4);
      output.WriteInt32(RewardRetrieve);
    }
    if (NewbieCheckInRewardMask != 0) {
      output.WriteRawTag(152, 4);
      output.WriteInt32(NewbieCheckInRewardMask);
    }
    if (BuyVentureCapitalTime != 0) {
      output.WriteRawTag(160, 4);
      output.WriteUInt32(BuyVentureCapitalTime);
    }
    if (VentureCapitalLoginCount != 0) {
      output.WriteRawTag(168, 4);
      output.WriteInt32(VentureCapitalLoginCount);
    }
    if (VentureCapitalRewardMask != 0) {
      output.WriteRawTag(176, 4);
      output.WriteUInt32(VentureCapitalRewardMask);
    }
    if (GroupBuyTime != 0) {
      output.WriteRawTag(184, 4);
      output.WriteUInt32(GroupBuyTime);
    }
    if (GroupBuyRewardMask != 0) {
      output.WriteRawTag(192, 4);
      output.WriteUInt32(GroupBuyRewardMask);
    }
    if (Sycee != 0) {
      output.WriteRawTag(200, 4);
      output.WriteInt32(Sycee);
    }
    if (LuckyRewardId != 0) {
      output.WriteRawTag(208, 4);
      output.WriteInt32(LuckyRewardId);
    }
    if (LuckyRewardEndtime != 0) {
      output.WriteRawTag(216, 4);
      output.WriteUInt32(LuckyRewardEndtime);
    }
    if (BuyLevelRewardTime != 0) {
      output.WriteRawTag(224, 4);
      output.WriteUInt32(BuyLevelRewardTime);
    }
    if (PowerInvisible != false) {
      output.WriteRawTag(232, 4);
      output.WriteBool(PowerInvisible);
    }
    if (CreateTime != 0) {
      output.WriteRawTag(245, 4);
      output.WriteFixed32(CreateTime);
    }
    if (KarmaNode != 0) {
      output.WriteRawTag(248, 4);
      output.WriteInt32(KarmaNode);
    }
    if (IsMasterGraduated != false) {
      output.WriteRawTag(128, 5);
      output.WriteBool(IsMasterGraduated);
    }
    if (DungeonHosted != false) {
      output.WriteRawTag(136, 5);
      output.WriteBool(DungeonHosted);
    }
    if (IsTakeSingleArenaFirstWinReward != false) {
      output.WriteRawTag(144, 5);
      output.WriteBool(IsTakeSingleArenaFirstWinReward);
    }
    if (IsTakeTeamArenaFirstWinReward != false) {
      output.WriteRawTag(152, 5);
      output.WriteBool(IsTakeTeamArenaFirstWinReward);
    }
    if (DrawAvatarCount != 0) {
      output.WriteRawTag(160, 5);
      output.WriteInt32(DrawAvatarCount);
    }
    if (DrawAvatarRewardMask != 0) {
      output.WriteRawTag(168, 5);
      output.WriteUInt32(DrawAvatarRewardMask);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Roleid != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roleid);
    }
    if (Rolename.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Rolename);
    }
    if (Class != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Class);
    }
    if (Body != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Body);
    }
    if (Gender != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (StoryProgress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoryProgress);
    }
    if (Frame != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
    }
    if (ServerTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTime);
    }
    size += spellList_.CalculateSize(_repeated_spellList_codec);
    if (SpellSlotList != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpellSlotList);
    }
    if (Portrait != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Portrait);
    }
    if (PortraitBox != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PortraitBox);
    }
    if (ClientVar != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ClientVar);
    }
    if (Spiritid != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Spiritid);
    }
    if (IsSkipArrange != false) {
      size += 2 + 1;
    }
    if (ActivityReward != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ActivityReward);
    }
    if (EloScore != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(EloScore);
    }
    if (TeamEloScore != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(TeamEloScore);
    }
    if (talentList_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TalentList);
    }
    if (TalentSlotList != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(TalentSlotList);
    }
    if (roleVarList_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(RoleVarList);
    }
    if (ServerTimeZone != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ServerTimeZone);
    }
    if (IsArenaMatch != false) {
      size += 2 + 1;
    }
    if (LoginTime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LoginTime);
    }
    if (GuildId != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
    }
    if (LastCheckInTime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastCheckInTime);
    }
    if (LastCheckInId != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastCheckInId);
    }
    if (CheckInCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CheckInCount);
    }
    if (MaxRoleLevel != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxRoleLevel);
    }
    if (dailyLimit_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DailyLimit);
    }
    if (weeklyLimit_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(WeeklyLimit);
    }
    if (sgem_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Sgem);
    }
    if (StoryReward != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StoryReward);
    }
    if (RushMaxLevel != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(RushMaxLevel);
    }
    if (RushDefeatTimes != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(RushDefeatTimes);
    }
    if (ServerMaxLevel != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ServerMaxLevel);
    }
    if (ServerAvgLevel != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ServerAvgLevel);
    }
    if (NextLevelDayCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NextLevelDayCount);
    }
    if (OverflowExp != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(OverflowExp);
    }
    if (OnlineReward != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OnlineReward);
    }
    if (OnlineTime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OnlineTime);
    }
    if (TodayOnlineTime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TodayOnlineTime);
    }
    if (NextLevel != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NextLevel);
    }
    if (LimitedTimeReward != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LimitedTimeReward);
    }
    if (DungeonAccelerated != false) {
      size += 2 + 1;
    }
    if (City != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(City);
    }
    if (Longitude != 0D) {
      size += 2 + 8;
    }
    if (Latitude != 0D) {
      size += 2 + 8;
    }
    if (LbsFlag != false) {
      size += 2 + 1;
    }
    if (IsTakeFirstChargeReward != false) {
      size += 2 + 1;
    }
    if (TobeUniqueMaster != false) {
      size += 2 + 1;
    }
    if (PayZoneId != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PayZoneId);
    }
    if (PowerLevel != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PowerLevel);
    }
    if (RewardRetrieve != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(RewardRetrieve);
    }
    if (NewbieCheckInRewardMask != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewbieCheckInRewardMask);
    }
    if (BuyVentureCapitalTime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuyVentureCapitalTime);
    }
    if (VentureCapitalLoginCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(VentureCapitalLoginCount);
    }
    if (VentureCapitalRewardMask != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(VentureCapitalRewardMask);
    }
    if (GroupBuyTime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GroupBuyTime);
    }
    if (GroupBuyRewardMask != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GroupBuyRewardMask);
    }
    if (Sycee != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Sycee);
    }
    if (LuckyRewardId != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(LuckyRewardId);
    }
    if (LuckyRewardEndtime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LuckyRewardEndtime);
    }
    if (BuyLevelRewardTime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuyLevelRewardTime);
    }
    if (PowerInvisible != false) {
      size += 2 + 1;
    }
    if (CreateTime != 0) {
      size += 2 + 4;
    }
    if (KarmaNode != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(KarmaNode);
    }
    if (IsMasterGraduated != false) {
      size += 2 + 1;
    }
    if (DungeonHosted != false) {
      size += 2 + 1;
    }
    if (IsTakeSingleArenaFirstWinReward != false) {
      size += 2 + 1;
    }
    if (IsTakeTeamArenaFirstWinReward != false) {
      size += 2 + 1;
    }
    if (DrawAvatarCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DrawAvatarCount);
    }
    if (DrawAvatarRewardMask != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DrawAvatarRewardMask);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(G2C_SYNC_ROLE_DATA_BEGIN other) {
    if (other == null) {
      return;
    }
    if (other.Roleid != 0UL) {
      Roleid = other.Roleid;
    }
    if (other.Rolename.Length != 0) {
      Rolename = other.Rolename;
    }
    if (other.Class != 0) {
      Class = other.Class;
    }
    if (other.Body != 0) {
      Body = other.Body;
    }
    if (other.Gender != 0) {
      Gender = other.Gender;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.StoryProgress != 0) {
      StoryProgress = other.StoryProgress;
    }
    if (other.Frame != 0) {
      Frame = other.Frame;
    }
    if (other.ServerTime != 0) {
      ServerTime = other.ServerTime;
    }
    spellList_.Add(other.spellList_);
    if (other.SpellSlotList != 0) {
      SpellSlotList = other.SpellSlotList;
    }
    if (other.Portrait != 0) {
      Portrait = other.Portrait;
    }
    if (other.PortraitBox != 0) {
      PortraitBox = other.PortraitBox;
    }
    if (other.ClientVar != 0) {
      ClientVar = other.ClientVar;
    }
    if (other.Spiritid != 0UL) {
      Spiritid = other.Spiritid;
    }
    if (other.IsSkipArrange != false) {
      IsSkipArrange = other.IsSkipArrange;
    }
    if (other.ActivityReward != 0) {
      ActivityReward = other.ActivityReward;
    }
    if (other.EloScore != 0) {
      EloScore = other.EloScore;
    }
    if (other.TeamEloScore != 0) {
      TeamEloScore = other.TeamEloScore;
    }
    if (other.talentList_ != null) {
      if (talentList_ == null) {
        talentList_ = new global::TALENT_INFO();
      }
      TalentList.MergeFrom(other.TalentList);
    }
    if (other.TalentSlotList != 0) {
      TalentSlotList = other.TalentSlotList;
    }
    if (other.roleVarList_ != null) {
      if (roleVarList_ == null) {
        roleVarList_ = new global::VARIABLE_INFO();
      }
      RoleVarList.MergeFrom(other.RoleVarList);
    }
    if (other.ServerTimeZone != 0) {
      ServerTimeZone = other.ServerTimeZone;
    }
    if (other.IsArenaMatch != false) {
      IsArenaMatch = other.IsArenaMatch;
    }
    if (other.LoginTime != 0) {
      LoginTime = other.LoginTime;
    }
    if (other.GuildId != 0UL) {
      GuildId = other.GuildId;
    }
    if (other.LastCheckInTime != 0) {
      LastCheckInTime = other.LastCheckInTime;
    }
    if (other.LastCheckInId != 0) {
      LastCheckInId = other.LastCheckInId;
    }
    if (other.CheckInCount != 0) {
      CheckInCount = other.CheckInCount;
    }
    if (other.MaxRoleLevel != 0) {
      MaxRoleLevel = other.MaxRoleLevel;
    }
    if (other.dailyLimit_ != null) {
      if (dailyLimit_ == null) {
        dailyLimit_ = new global::VARIABLE_INFO();
      }
      DailyLimit.MergeFrom(other.DailyLimit);
    }
    if (other.weeklyLimit_ != null) {
      if (weeklyLimit_ == null) {
        weeklyLimit_ = new global::VARIABLE_INFO();
      }
      WeeklyLimit.MergeFrom(other.WeeklyLimit);
    }
    if (other.sgem_ != null) {
      if (sgem_ == null) {
        sgem_ = new global::SGEM_INFO();
      }
      Sgem.MergeFrom(other.Sgem);
    }
    if (other.StoryReward != 0) {
      StoryReward = other.StoryReward;
    }
    if (other.RushMaxLevel != 0) {
      RushMaxLevel = other.RushMaxLevel;
    }
    if (other.RushDefeatTimes != 0) {
      RushDefeatTimes = other.RushDefeatTimes;
    }
    if (other.ServerMaxLevel != 0) {
      ServerMaxLevel = other.ServerMaxLevel;
    }
    if (other.ServerAvgLevel != 0) {
      ServerAvgLevel = other.ServerAvgLevel;
    }
    if (other.NextLevelDayCount != 0) {
      NextLevelDayCount = other.NextLevelDayCount;
    }
    if (other.OverflowExp != 0L) {
      OverflowExp = other.OverflowExp;
    }
    if (other.OnlineReward != 0) {
      OnlineReward = other.OnlineReward;
    }
    if (other.OnlineTime != 0) {
      OnlineTime = other.OnlineTime;
    }
    if (other.TodayOnlineTime != 0) {
      TodayOnlineTime = other.TodayOnlineTime;
    }
    if (other.NextLevel != 0) {
      NextLevel = other.NextLevel;
    }
    if (other.LimitedTimeReward != 0) {
      LimitedTimeReward = other.LimitedTimeReward;
    }
    if (other.DungeonAccelerated != false) {
      DungeonAccelerated = other.DungeonAccelerated;
    }
    if (other.City != 0) {
      City = other.City;
    }
    if (other.Longitude != 0D) {
      Longitude = other.Longitude;
    }
    if (other.Latitude != 0D) {
      Latitude = other.Latitude;
    }
    if (other.LbsFlag != false) {
      LbsFlag = other.LbsFlag;
    }
    if (other.IsTakeFirstChargeReward != false) {
      IsTakeFirstChargeReward = other.IsTakeFirstChargeReward;
    }
    if (other.TobeUniqueMaster != false) {
      TobeUniqueMaster = other.TobeUniqueMaster;
    }
    if (other.PayZoneId != 0) {
      PayZoneId = other.PayZoneId;
    }
    if (other.PowerLevel != 0) {
      PowerLevel = other.PowerLevel;
    }
    if (other.RewardRetrieve != 0) {
      RewardRetrieve = other.RewardRetrieve;
    }
    if (other.NewbieCheckInRewardMask != 0) {
      NewbieCheckInRewardMask = other.NewbieCheckInRewardMask;
    }
    if (other.BuyVentureCapitalTime != 0) {
      BuyVentureCapitalTime = other.BuyVentureCapitalTime;
    }
    if (other.VentureCapitalLoginCount != 0) {
      VentureCapitalLoginCount = other.VentureCapitalLoginCount;
    }
    if (other.VentureCapitalRewardMask != 0) {
      VentureCapitalRewardMask = other.VentureCapitalRewardMask;
    }
    if (other.GroupBuyTime != 0) {
      GroupBuyTime = other.GroupBuyTime;
    }
    if (other.GroupBuyRewardMask != 0) {
      GroupBuyRewardMask = other.GroupBuyRewardMask;
    }
    if (other.Sycee != 0) {
      Sycee = other.Sycee;
    }
    if (other.LuckyRewardId != 0) {
      LuckyRewardId = other.LuckyRewardId;
    }
    if (other.LuckyRewardEndtime != 0) {
      LuckyRewardEndtime = other.LuckyRewardEndtime;
    }
    if (other.BuyLevelRewardTime != 0) {
      BuyLevelRewardTime = other.BuyLevelRewardTime;
    }
    if (other.PowerInvisible != false) {
      PowerInvisible = other.PowerInvisible;
    }
    if (other.CreateTime != 0) {
      CreateTime = other.CreateTime;
    }
    if (other.KarmaNode != 0) {
      KarmaNode = other.KarmaNode;
    }
    if (other.IsMasterGraduated != false) {
      IsMasterGraduated = other.IsMasterGraduated;
    }
    if (other.DungeonHosted != false) {
      DungeonHosted = other.DungeonHosted;
    }
    if (other.IsTakeSingleArenaFirstWinReward != false) {
      IsTakeSingleArenaFirstWinReward = other.IsTakeSingleArenaFirstWinReward;
    }
    if (other.IsTakeTeamArenaFirstWinReward != false) {
      IsTakeTeamArenaFirstWinReward = other.IsTakeTeamArenaFirstWinReward;
    }
    if (other.DrawAvatarCount != 0) {
      DrawAvatarCount = other.DrawAvatarCount;
    }
    if (other.DrawAvatarRewardMask != 0) {
      DrawAvatarRewardMask = other.DrawAvatarRewardMask;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Roleid = input.ReadUInt64();
          break;
        }
        case 18: {
          Rolename = input.ReadString();
          break;
        }
        case 24: {
          Class = input.ReadInt32();
          break;
        }
        case 32: {
          Body = input.ReadInt32();
          break;
        }
        case 40: {
          Gender = input.ReadInt32();
          break;
        }
        case 48: {
          Level = input.ReadInt32();
          break;
        }
        case 56: {
          Exp = input.ReadInt32();
          break;
        }
        case 64: {
          StoryProgress = input.ReadInt32();
          break;
        }
        case 72: {
          Frame = input.ReadInt32();
          break;
        }
        case 80: {
          ServerTime = input.ReadUInt32();
          break;
        }
        case 90: {
          spellList_.AddEntriesFrom(input, _repeated_spellList_codec);
          break;
        }
        case 96: {
          SpellSlotList = input.ReadInt32();
          break;
        }
        case 104: {
          Portrait = input.ReadInt32();
          break;
        }
        case 112: {
          PortraitBox = input.ReadInt32();
          break;
        }
        case 136: {
          ClientVar = input.ReadInt32();
          break;
        }
        case 200: {
          Spiritid = input.ReadUInt64();
          break;
        }
        case 208: {
          IsSkipArrange = input.ReadBool();
          break;
        }
        case 216: {
          ActivityReward = input.ReadUInt32();
          break;
        }
        case 224: {
          EloScore = input.ReadInt32();
          break;
        }
        case 232: {
          TeamEloScore = input.ReadInt32();
          break;
        }
        case 242: {
          if (talentList_ == null) {
            talentList_ = new global::TALENT_INFO();
          }
          input.ReadMessage(talentList_);
          break;
        }
        case 248: {
          TalentSlotList = input.ReadInt32();
          break;
        }
        case 258: {
          if (roleVarList_ == null) {
            roleVarList_ = new global::VARIABLE_INFO();
          }
          input.ReadMessage(roleVarList_);
          break;
        }
        case 264: {
          ServerTimeZone = input.ReadInt32();
          break;
        }
        case 272: {
          IsArenaMatch = input.ReadBool();
          break;
        }
        case 280: {
          LoginTime = input.ReadUInt32();
          break;
        }
        case 288: {
          GuildId = input.ReadUInt64();
          break;
        }
        case 296: {
          LastCheckInTime = input.ReadUInt32();
          break;
        }
        case 304: {
          LastCheckInId = input.ReadUInt32();
          break;
        }
        case 312: {
          CheckInCount = input.ReadUInt32();
          break;
        }
        case 320: {
          MaxRoleLevel = input.ReadUInt32();
          break;
        }
        case 330: {
          if (dailyLimit_ == null) {
            dailyLimit_ = new global::VARIABLE_INFO();
          }
          input.ReadMessage(dailyLimit_);
          break;
        }
        case 338: {
          if (weeklyLimit_ == null) {
            weeklyLimit_ = new global::VARIABLE_INFO();
          }
          input.ReadMessage(weeklyLimit_);
          break;
        }
        case 346: {
          if (sgem_ == null) {
            sgem_ = new global::SGEM_INFO();
          }
          input.ReadMessage(sgem_);
          break;
        }
        case 352: {
          StoryReward = input.ReadUInt32();
          break;
        }
        case 360: {
          RushMaxLevel = input.ReadInt32();
          break;
        }
        case 368: {
          RushDefeatTimes = input.ReadInt32();
          break;
        }
        case 376: {
          ServerMaxLevel = input.ReadInt32();
          break;
        }
        case 384: {
          ServerAvgLevel = input.ReadInt32();
          break;
        }
        case 392: {
          NextLevelDayCount = input.ReadInt32();
          break;
        }
        case 400: {
          OverflowExp = input.ReadInt64();
          break;
        }
        case 408: {
          OnlineReward = input.ReadUInt32();
          break;
        }
        case 416: {
          OnlineTime = input.ReadUInt32();
          break;
        }
        case 424: {
          TodayOnlineTime = input.ReadUInt32();
          break;
        }
        case 432: {
          NextLevel = input.ReadInt32();
          break;
        }
        case 440: {
          LimitedTimeReward = input.ReadUInt32();
          break;
        }
        case 456: {
          DungeonAccelerated = input.ReadBool();
          break;
        }
        case 464: {
          City = input.ReadInt32();
          break;
        }
        case 473: {
          Longitude = input.ReadDouble();
          break;
        }
        case 481: {
          Latitude = input.ReadDouble();
          break;
        }
        case 488: {
          LbsFlag = input.ReadBool();
          break;
        }
        case 496: {
          IsTakeFirstChargeReward = input.ReadBool();
          break;
        }
        case 504: {
          TobeUniqueMaster = input.ReadBool();
          break;
        }
        case 512: {
          PayZoneId = input.ReadInt32();
          break;
        }
        case 520: {
          PowerLevel = input.ReadInt32();
          break;
        }
        case 528: {
          RewardRetrieve = input.ReadInt32();
          break;
        }
        case 536: {
          NewbieCheckInRewardMask = input.ReadInt32();
          break;
        }
        case 544: {
          BuyVentureCapitalTime = input.ReadUInt32();
          break;
        }
        case 552: {
          VentureCapitalLoginCount = input.ReadInt32();
          break;
        }
        case 560: {
          VentureCapitalRewardMask = input.ReadUInt32();
          break;
        }
        case 568: {
          GroupBuyTime = input.ReadUInt32();
          break;
        }
        case 576: {
          GroupBuyRewardMask = input.ReadUInt32();
          break;
        }
        case 584: {
          Sycee = input.ReadInt32();
          break;
        }
        case 592: {
          LuckyRewardId = input.ReadInt32();
          break;
        }
        case 600: {
          LuckyRewardEndtime = input.ReadUInt32();
          break;
        }
        case 608: {
          BuyLevelRewardTime = input.ReadUInt32();
          break;
        }
        case 616: {
          PowerInvisible = input.ReadBool();
          break;
        }
        case 629: {
          CreateTime = input.ReadFixed32();
          break;
        }
        case 632: {
          KarmaNode = input.ReadInt32();
          break;
        }
        case 640: {
          IsMasterGraduated = input.ReadBool();
          break;
        }
        case 648: {
          DungeonHosted = input.ReadBool();
          break;
        }
        case 656: {
          IsTakeSingleArenaFirstWinReward = input.ReadBool();
          break;
        }
        case 664: {
          IsTakeTeamArenaFirstWinReward = input.ReadBool();
          break;
        }
        case 672: {
          DrawAvatarCount = input.ReadInt32();
          break;
        }
        case 680: {
          DrawAvatarRewardMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
