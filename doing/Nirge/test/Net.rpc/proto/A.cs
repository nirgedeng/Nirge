// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nirge.Core {

  /// <summary>Holder for reflection information generated from a.proto</summary>
  public static partial class AReflection {

    #region Descriptor
    /// <summary>File descriptor for a.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgdhLnByb3RvEgpOaXJnZS5Db3JlGg5ScGNQcm90by5wcm90byInCgRicmV0",
            "EgkKAWEYASABKAUSCQoBYhgCIAEoAxIJCgFjGAMgASgJIigKBWNhcmdzEgkK",
            "AWEYASABKAUSCQoBYhgCIAEoAxIJCgFjGAMgASgJIigKBWRhcmdzEgkKAWEY",
            "ASABKAUSCQoBYhgCIAEoAxIJCgFjGAMgASgJIicKBGRyZXQSCQoBYRgBIAEo",
            "BRIJCgFiGAIgASgDEgkKAWMYAyABKAkiJwoEZnJldBIJCgFhGAEgASgFEgkK",
            "AWIYAiABKAMSCQoBYxgDIAEoCSIoCgVnYXJncxIJCgFhGAEgASgFEgkKAWIY",
            "AiABKAMSCQoBYxgDIAEoCSIoCgVoYXJncxIJCgFhGAEgASgFEgkKAWIYAiAB",
            "KAMSCQoBYxgDIAEoCSInCgRocmV0EgkKAWEYASABKAUSCQoBYhgCIAEoAxIJ",
            "CgFjGAMgASgJMqcECgFBEk0KAWESHC5OaXJnZS5Db3JlLlJwY0NhbGxBcmdz",
            "RW1wdHkaHC5OaXJnZS5Db3JlLlJwY0NhbGxBcmdzRW1wdHkiDMqyHQIIAcqy",
            "HQIQARJBCgFiEhwuTmlyZ2UuQ29yZS5ScGNDYWxsQXJnc0VtcHR5GhAuTmly",
            "Z2UuQ29yZS5icmV0IgzKsh0CCALKsh0CEAESQgoBYxIRLk5pcmdlLkNvcmUu",
            "Y2FyZ3MaHC5OaXJnZS5Db3JlLlJwY0NhbGxBcmdzRW1wdHkiDMqyHQIIA8qy",
            "HQIQARI2CgFkEhEuTmlyZ2UuQ29yZS5kYXJncxoQLk5pcmdlLkNvcmUuZHJl",
            "dCIMyrIdAggEyrIdAhABEk0KAWUSHC5OaXJnZS5Db3JlLlJwY0NhbGxBcmdz",
            "RW1wdHkaHC5OaXJnZS5Db3JlLlJwY0NhbGxBcmdzRW1wdHkiDMqyHQIIBcqy",
            "HQIQABJBCgFmEhwuTmlyZ2UuQ29yZS5ScGNDYWxsQXJnc0VtcHR5GhAuTmly",
            "Z2UuQ29yZS5mcmV0IgzKsh0CCAbKsh0CEAASQgoBZxIRLk5pcmdlLkNvcmUu",
            "Z2FyZ3MaHC5OaXJnZS5Db3JlLlJwY0NhbGxBcmdzRW1wdHkiDMqyHQIIB8qy",
            "HQIQABI2CgFoEhEuTmlyZ2UuQ29yZS5oYXJncxoQLk5pcmdlLkNvcmUuaHJl",
            "dCIMyrIdAggIyrIdAhAAGgaqrB0CCAFCDaoCCk5pcmdlLkNvcmViBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Nirge.Core.RpcProtoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nirge.Core.bret), global::Nirge.Core.bret.Parser, new[]{ "A", "B", "C" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nirge.Core.cargs), global::Nirge.Core.cargs.Parser, new[]{ "A", "B", "C" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nirge.Core.dargs), global::Nirge.Core.dargs.Parser, new[]{ "A", "B", "C" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nirge.Core.dret), global::Nirge.Core.dret.Parser, new[]{ "A", "B", "C" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nirge.Core.fret), global::Nirge.Core.fret.Parser, new[]{ "A", "B", "C" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nirge.Core.gargs), global::Nirge.Core.gargs.Parser, new[]{ "A", "B", "C" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nirge.Core.hargs), global::Nirge.Core.hargs.Parser, new[]{ "A", "B", "C" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nirge.Core.hret), global::Nirge.Core.hret.Parser, new[]{ "A", "B", "C" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class bret : pb::IMessage<bret> {
    private static readonly pb::MessageParser<bret> _parser = new pb::MessageParser<bret>(() => new bret());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<bret> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nirge.Core.AReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bret() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bret(bret other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      c_ = other.c_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bret Clone() {
      return new bret(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private long b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 3;
    private string c_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C {
      get { return c_; }
      set {
        c_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as bret);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(bret other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      if (C != other.C) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0L) hash ^= B.GetHashCode();
      if (C.Length != 0) hash ^= C.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
      if (B != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(B);
      }
      if (C.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(C);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (B != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(B);
      }
      if (C.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(bret other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B != 0L) {
        B = other.B;
      }
      if (other.C.Length != 0) {
        C = other.C;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
          case 16: {
            B = input.ReadInt64();
            break;
          }
          case 26: {
            C = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class cargs : pb::IMessage<cargs> {
    private static readonly pb::MessageParser<cargs> _parser = new pb::MessageParser<cargs>(() => new cargs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<cargs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nirge.Core.AReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public cargs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public cargs(cargs other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      c_ = other.c_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public cargs Clone() {
      return new cargs(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private long b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 3;
    private string c_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C {
      get { return c_; }
      set {
        c_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as cargs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(cargs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      if (C != other.C) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0L) hash ^= B.GetHashCode();
      if (C.Length != 0) hash ^= C.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
      if (B != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(B);
      }
      if (C.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(C);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (B != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(B);
      }
      if (C.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(cargs other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B != 0L) {
        B = other.B;
      }
      if (other.C.Length != 0) {
        C = other.C;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
          case 16: {
            B = input.ReadInt64();
            break;
          }
          case 26: {
            C = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class dargs : pb::IMessage<dargs> {
    private static readonly pb::MessageParser<dargs> _parser = new pb::MessageParser<dargs>(() => new dargs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<dargs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nirge.Core.AReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dargs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dargs(dargs other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      c_ = other.c_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dargs Clone() {
      return new dargs(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private long b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 3;
    private string c_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C {
      get { return c_; }
      set {
        c_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as dargs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(dargs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      if (C != other.C) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0L) hash ^= B.GetHashCode();
      if (C.Length != 0) hash ^= C.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
      if (B != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(B);
      }
      if (C.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(C);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (B != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(B);
      }
      if (C.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(dargs other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B != 0L) {
        B = other.B;
      }
      if (other.C.Length != 0) {
        C = other.C;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
          case 16: {
            B = input.ReadInt64();
            break;
          }
          case 26: {
            C = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class dret : pb::IMessage<dret> {
    private static readonly pb::MessageParser<dret> _parser = new pb::MessageParser<dret>(() => new dret());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<dret> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nirge.Core.AReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dret() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dret(dret other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      c_ = other.c_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dret Clone() {
      return new dret(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private long b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 3;
    private string c_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C {
      get { return c_; }
      set {
        c_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as dret);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(dret other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      if (C != other.C) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0L) hash ^= B.GetHashCode();
      if (C.Length != 0) hash ^= C.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
      if (B != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(B);
      }
      if (C.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(C);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (B != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(B);
      }
      if (C.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(dret other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B != 0L) {
        B = other.B;
      }
      if (other.C.Length != 0) {
        C = other.C;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
          case 16: {
            B = input.ReadInt64();
            break;
          }
          case 26: {
            C = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class fret : pb::IMessage<fret> {
    private static readonly pb::MessageParser<fret> _parser = new pb::MessageParser<fret>(() => new fret());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<fret> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nirge.Core.AReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fret() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fret(fret other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      c_ = other.c_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fret Clone() {
      return new fret(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private long b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 3;
    private string c_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C {
      get { return c_; }
      set {
        c_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as fret);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(fret other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      if (C != other.C) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0L) hash ^= B.GetHashCode();
      if (C.Length != 0) hash ^= C.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
      if (B != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(B);
      }
      if (C.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(C);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (B != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(B);
      }
      if (C.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(fret other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B != 0L) {
        B = other.B;
      }
      if (other.C.Length != 0) {
        C = other.C;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
          case 16: {
            B = input.ReadInt64();
            break;
          }
          case 26: {
            C = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class gargs : pb::IMessage<gargs> {
    private static readonly pb::MessageParser<gargs> _parser = new pb::MessageParser<gargs>(() => new gargs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<gargs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nirge.Core.AReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public gargs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public gargs(gargs other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      c_ = other.c_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public gargs Clone() {
      return new gargs(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private long b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 3;
    private string c_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C {
      get { return c_; }
      set {
        c_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as gargs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(gargs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      if (C != other.C) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0L) hash ^= B.GetHashCode();
      if (C.Length != 0) hash ^= C.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
      if (B != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(B);
      }
      if (C.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(C);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (B != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(B);
      }
      if (C.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(gargs other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B != 0L) {
        B = other.B;
      }
      if (other.C.Length != 0) {
        C = other.C;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
          case 16: {
            B = input.ReadInt64();
            break;
          }
          case 26: {
            C = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class hargs : pb::IMessage<hargs> {
    private static readonly pb::MessageParser<hargs> _parser = new pb::MessageParser<hargs>(() => new hargs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<hargs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nirge.Core.AReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public hargs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public hargs(hargs other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      c_ = other.c_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public hargs Clone() {
      return new hargs(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private long b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 3;
    private string c_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C {
      get { return c_; }
      set {
        c_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as hargs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(hargs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      if (C != other.C) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0L) hash ^= B.GetHashCode();
      if (C.Length != 0) hash ^= C.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
      if (B != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(B);
      }
      if (C.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(C);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (B != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(B);
      }
      if (C.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(hargs other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B != 0L) {
        B = other.B;
      }
      if (other.C.Length != 0) {
        C = other.C;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
          case 16: {
            B = input.ReadInt64();
            break;
          }
          case 26: {
            C = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class hret : pb::IMessage<hret> {
    private static readonly pb::MessageParser<hret> _parser = new pb::MessageParser<hret>(() => new hret());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<hret> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nirge.Core.AReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public hret() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public hret(hret other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      c_ = other.c_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public hret Clone() {
      return new hret(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private long b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 3;
    private string c_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C {
      get { return c_; }
      set {
        c_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as hret);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(hret other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      if (C != other.C) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0L) hash ^= B.GetHashCode();
      if (C.Length != 0) hash ^= C.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
      if (B != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(B);
      }
      if (C.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(C);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (B != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(B);
      }
      if (C.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(hret other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B != 0L) {
        B = other.B;
      }
      if (other.C.Length != 0) {
        C = other.C;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
          case 16: {
            B = input.ReadInt64();
            break;
          }
          case 26: {
            C = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
