// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a.proto
#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using pb = global::Google.Protobuf;
using System.Collections.Generic;
using System.Threading.Tasks;
using Nirge.Core;
using log4net;
using System;

namespace Nirge.Core {
  #region CARpcService
  public interface IARpcService : IRpcService {
    void a(int channel);
    void b(int channel);
    void c(int channel, Nirge.Core.cargs args);
    void d(int channel, Nirge.Core.dargs args);
    void e(int channel);
    Nirge.Core.fret f(int channel);
    void g(int channel, Nirge.Core.gargs args);
    Nirge.Core.hret h(int channel, Nirge.Core.hargs args);
  }
  public class CARpcCaller : CRpcCaller {
    public CARpcCaller(CRpcCallerArgs args, ILog log, CRpcStream stream, CRpcCommunicator communicator, CRpcCallStubProvider stubs)
    	: base(args, log, stream, communicator, stubs, global::Nirge.Core.AReflection.Descriptor.Services[0], 1) {}
    public void a(int channel = 0){
      Call<Nirge.Core.RpcCallArgsEmpty>(channel, 1, ArgsEmpty);
    }
    public void b(int channel = 0){
      Call<Nirge.Core.RpcCallArgsEmpty>(channel, 2, ArgsEmpty);
    }
    public void c(Nirge.Core.cargs args, int channel = 0){
      Call<Nirge.Core.cargs>(channel, 3, args);
    }
    public void d(Nirge.Core.dargs args, int channel = 0){
      Call<Nirge.Core.dargs>(channel, 4, args);
    }
    public Task<Nirge.Core.RpcCallArgsEmpty> e(int channel = 0){
      return CallAsync<Nirge.Core.RpcCallArgsEmpty, Nirge.Core.RpcCallArgsEmpty>(channel, 5, ArgsEmpty);
    }
    public Task<Nirge.Core.fret> f(int channel = 0){
      return CallAsync<Nirge.Core.RpcCallArgsEmpty, Nirge.Core.fret>(channel, 6, ArgsEmpty);
    }
    public Task<Nirge.Core.RpcCallArgsEmpty> g(Nirge.Core.gargs args, int channel = 0){
      return CallAsync<Nirge.Core.gargs, Nirge.Core.RpcCallArgsEmpty>(channel, 7, args);
    }
    public Task<Nirge.Core.hret> h(Nirge.Core.hargs args, int channel = 0){
      return CallAsync<Nirge.Core.hargs, Nirge.Core.hret>(channel, 8, args);
    }
  }
  [CRpcService(1)]
  public class CARpcCallee : CRpcCallee<IARpcService> {
    public CARpcCallee(CRpcCalleeArgs args, ILog log, CRpcStream stream, CRpcCommunicator communicator, IARpcService service)
    	: base(args, log, stream, communicator, global::Nirge.Core.AReflection.Descriptor.Services[0], service) {}
    public override void Call(int channel, Nirge.Core.RpcCallReq req) {
      switch (req.Call) {
      case 1:
        Call<Nirge.Core.RpcCallArgsEmpty, Nirge.Core.RpcCallArgsEmpty>(channel, req, (_, args) => {
          _service.a(channel);
          return ArgsEmpty;
        });
        break;
      case 2:
        Call<Nirge.Core.RpcCallArgsEmpty, Nirge.Core.RpcCallArgsEmpty>(channel, req, (_, args) => {
          _service.b(channel);
          return ArgsEmpty;
        });
        break;
      case 3:
        Call<Nirge.Core.cargs, Nirge.Core.RpcCallArgsEmpty>(channel, req, (_, args) => {
          _service.c(channel, args);
          return ArgsEmpty;
        });
        break;
      case 4:
        Call<Nirge.Core.dargs, Nirge.Core.RpcCallArgsEmpty>(channel, req, (_, args) => {
          _service.d(channel, args);
          return ArgsEmpty;
        });
        break;
      case 5:
        CallAsync<Nirge.Core.RpcCallArgsEmpty, Nirge.Core.RpcCallArgsEmpty>(channel, req, (_, args) => {
          _service.e(channel);
          return ArgsEmpty;
        });
        break;
      case 6:
        CallAsync<Nirge.Core.RpcCallArgsEmpty, Nirge.Core.fret>(channel, req, (_, args) => {
          return _service.f(channel);
        });
        break;
      case 7:
        CallAsync<Nirge.Core.gargs, Nirge.Core.RpcCallArgsEmpty>(channel, req, (_, args) => {
          _service.g(channel, args);
          return ArgsEmpty;
        });
        break;
      case 8:
        CallAsync<Nirge.Core.hargs, Nirge.Core.hret>(channel, req, (_, args) => {
          return _service.h(channel, args);
        });
        break;
      default:
        base.Call(channel, req);
        break;
      }
    }
  }
  #endregion
}

#endregion
