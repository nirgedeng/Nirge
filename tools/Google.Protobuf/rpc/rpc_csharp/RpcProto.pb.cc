// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RpcProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Nirge {
namespace Core {
class RpcServiceOptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RpcServiceOption> {
} _RpcServiceOption_default_instance_;
class RpcServiceCallOptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RpcServiceCallOption> {
} _RpcServiceCallOption_default_instance_;
class RpcCallArgsEmptyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RpcCallArgsEmpty> {
} _RpcCallArgsEmpty_default_instance_;
class RpcCallReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RpcCallReq> {
} _RpcCallReq_default_instance_;
class RpcCallRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RpcCallRsp> {
} _RpcCallRsp_default_instance_;
class RpcCallExceptionRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RpcCallExceptionRsp> {
} _RpcCallExceptionRsp_default_instance_;

namespace protobuf_RpcProto_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcServiceOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcServiceOption, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcServiceCallOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcServiceCallOption, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcServiceCallOption, isoneway_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallArgsEmpty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallReq, serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallReq, service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallReq, call_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallReq, args_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallRsp, serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallRsp, service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallRsp, call_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallRsp, ret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallExceptionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallExceptionRsp, serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallExceptionRsp, service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallExceptionRsp, call_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallExceptionRsp, exception_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(RpcServiceOption)},
  { 6, -1, sizeof(RpcServiceCallOption)},
  { 13, -1, sizeof(RpcCallArgsEmpty)},
  { 18, -1, sizeof(RpcCallReq)},
  { 27, -1, sizeof(RpcCallRsp)},
  { 36, -1, sizeof(RpcCallExceptionRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RpcServiceOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RpcServiceCallOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RpcCallArgsEmpty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RpcCallReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RpcCallRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RpcCallExceptionRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "RpcProto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _RpcServiceOption_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RpcServiceCallOption_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RpcCallArgsEmpty_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _RpcCallReq_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _RpcCallRsp_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _RpcCallExceptionRsp_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::InitDefaults();
  ::Nirge::Core::protobuf_Proto_2eproto::InitDefaults();
  _RpcServiceOption_default_instance_.DefaultConstruct();
  _RpcServiceCallOption_default_instance_.DefaultConstruct();
  _RpcCallArgsEmpty_default_instance_.DefaultConstruct();
  _RpcCallReq_default_instance_.DefaultConstruct();
  _RpcCallRsp_default_instance_.DefaultConstruct();
  _RpcCallExceptionRsp_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::google::protobuf::ServiceOptions::internal_default_instance(),
    60001, 11, false, false,
    ::Nirge::Core::RpcServiceOption::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::google::protobuf::MethodOptions::internal_default_instance(),
    60002, 11, false, false,
    ::Nirge::Core::RpcServiceCallOption::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016RpcProto.proto\022\nNirge.Core\032 google/pro"
      "tobuf/descriptor.proto\032\013Proto.proto\"\037\n\020R"
      "pcServiceOption\022\013\n\003Uid\030\001 \001(\005\"5\n\024RpcServi"
      "ceCallOption\022\013\n\003Uid\030\001 \001(\005\022\020\n\010IsOneWay\030\002 "
      "\001(\010\"\022\n\020RpcCallArgsEmpty\"I\n\nRpcCallReq\022\016\n"
      "\006Serial\030\001 \001(\005\022\017\n\007Service\030\002 \001(\005\022\014\n\004Call\030\003"
      " \001(\005\022\014\n\004Args\030\004 \001(\014\"H\n\nRpcCallRsp\022\016\n\006Seri"
      "al\030\001 \001(\005\022\017\n\007Service\030\002 \001(\005\022\014\n\004Call\030\003 \001(\005\022"
      "\013\n\003Ret\030\004 \001(\014\"W\n\023RpcCallExceptionRsp\022\016\n\006S"
      "erial\030\001 \001(\005\022\017\n\007Service\030\002 \001(\005\022\014\n\004Call\030\003 \001"
      "(\005\022\021\n\tException\030\004 \001(\005:S\n\nRpcService\022\037.go"
      "ogle.protobuf.ServiceOptions\030\341\324\003 \001(\0132\034.N"
      "irge.Core.RpcServiceOption:Z\n\016RpcService"
      "Call\022\036.google.protobuf.MethodOptions\030\342\324\003"
      " \001(\0132 .Nirge.Core.RpcServiceCallOptionB\r"
      "\252\002\nNirge.Coreb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 621);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RpcProto.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
  ::Nirge::Core::protobuf_Proto_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_RpcProto_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcServiceOption::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcServiceOption::RpcServiceOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RpcProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nirge.Core.RpcServiceOption)
}
RpcServiceOption::RpcServiceOption(const RpcServiceOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:Nirge.Core.RpcServiceOption)
}

void RpcServiceOption::SharedCtor() {
  uid_ = 0;
  _cached_size_ = 0;
}

RpcServiceOption::~RpcServiceOption() {
  // @@protoc_insertion_point(destructor:Nirge.Core.RpcServiceOption)
  SharedDtor();
}

void RpcServiceOption::SharedDtor() {
}

void RpcServiceOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcServiceOption::descriptor() {
  protobuf_RpcProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcServiceOption& RpcServiceOption::default_instance() {
  protobuf_RpcProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

RpcServiceOption* RpcServiceOption::New(::google::protobuf::Arena* arena) const {
  RpcServiceOption* n = new RpcServiceOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcServiceOption::Clear() {
// @@protoc_insertion_point(message_clear_start:Nirge.Core.RpcServiceOption)
  uid_ = 0;
}

bool RpcServiceOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nirge.Core.RpcServiceOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nirge.Core.RpcServiceOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nirge.Core.RpcServiceOption)
  return false;
#undef DO_
}

void RpcServiceOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nirge.Core.RpcServiceOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // @@protoc_insertion_point(serialize_end:Nirge.Core.RpcServiceOption)
}

::google::protobuf::uint8* RpcServiceOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Nirge.Core.RpcServiceOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Nirge.Core.RpcServiceOption)
  return target;
}

size_t RpcServiceOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nirge.Core.RpcServiceOption)
  size_t total_size = 0;

  // int32 Uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcServiceOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nirge.Core.RpcServiceOption)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcServiceOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcServiceOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nirge.Core.RpcServiceOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nirge.Core.RpcServiceOption)
    MergeFrom(*source);
  }
}

void RpcServiceOption::MergeFrom(const RpcServiceOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nirge.Core.RpcServiceOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void RpcServiceOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nirge.Core.RpcServiceOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcServiceOption::CopyFrom(const RpcServiceOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nirge.Core.RpcServiceOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcServiceOption::IsInitialized() const {
  return true;
}

void RpcServiceOption::Swap(RpcServiceOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcServiceOption::InternalSwap(RpcServiceOption* other) {
  std::swap(uid_, other->uid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcServiceOption::GetMetadata() const {
  protobuf_RpcProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcServiceOption

// int32 Uid = 1;
void RpcServiceOption::clear_uid() {
  uid_ = 0;
}
::google::protobuf::int32 RpcServiceOption::uid() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcServiceOption.Uid)
  return uid_;
}
void RpcServiceOption::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcServiceOption.Uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcServiceCallOption::kUidFieldNumber;
const int RpcServiceCallOption::kIsOneWayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcServiceCallOption::RpcServiceCallOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RpcProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nirge.Core.RpcServiceCallOption)
}
RpcServiceCallOption::RpcServiceCallOption(const RpcServiceCallOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isoneway_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(isoneway_));
  // @@protoc_insertion_point(copy_constructor:Nirge.Core.RpcServiceCallOption)
}

void RpcServiceCallOption::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isoneway_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(isoneway_));
  _cached_size_ = 0;
}

RpcServiceCallOption::~RpcServiceCallOption() {
  // @@protoc_insertion_point(destructor:Nirge.Core.RpcServiceCallOption)
  SharedDtor();
}

void RpcServiceCallOption::SharedDtor() {
}

void RpcServiceCallOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcServiceCallOption::descriptor() {
  protobuf_RpcProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcServiceCallOption& RpcServiceCallOption::default_instance() {
  protobuf_RpcProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

RpcServiceCallOption* RpcServiceCallOption::New(::google::protobuf::Arena* arena) const {
  RpcServiceCallOption* n = new RpcServiceCallOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcServiceCallOption::Clear() {
// @@protoc_insertion_point(message_clear_start:Nirge.Core.RpcServiceCallOption)
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isoneway_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(isoneway_));
}

bool RpcServiceCallOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nirge.Core.RpcServiceCallOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsOneWay = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isoneway_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nirge.Core.RpcServiceCallOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nirge.Core.RpcServiceCallOption)
  return false;
#undef DO_
}

void RpcServiceCallOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nirge.Core.RpcServiceCallOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // bool IsOneWay = 2;
  if (this->isoneway() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isoneway(), output);
  }

  // @@protoc_insertion_point(serialize_end:Nirge.Core.RpcServiceCallOption)
}

::google::protobuf::uint8* RpcServiceCallOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Nirge.Core.RpcServiceCallOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // bool IsOneWay = 2;
  if (this->isoneway() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isoneway(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Nirge.Core.RpcServiceCallOption)
  return target;
}

size_t RpcServiceCallOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nirge.Core.RpcServiceCallOption)
  size_t total_size = 0;

  // int32 Uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // bool IsOneWay = 2;
  if (this->isoneway() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcServiceCallOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nirge.Core.RpcServiceCallOption)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcServiceCallOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcServiceCallOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nirge.Core.RpcServiceCallOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nirge.Core.RpcServiceCallOption)
    MergeFrom(*source);
  }
}

void RpcServiceCallOption::MergeFrom(const RpcServiceCallOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nirge.Core.RpcServiceCallOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.isoneway() != 0) {
    set_isoneway(from.isoneway());
  }
}

void RpcServiceCallOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nirge.Core.RpcServiceCallOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcServiceCallOption::CopyFrom(const RpcServiceCallOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nirge.Core.RpcServiceCallOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcServiceCallOption::IsInitialized() const {
  return true;
}

void RpcServiceCallOption::Swap(RpcServiceCallOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcServiceCallOption::InternalSwap(RpcServiceCallOption* other) {
  std::swap(uid_, other->uid_);
  std::swap(isoneway_, other->isoneway_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcServiceCallOption::GetMetadata() const {
  protobuf_RpcProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcServiceCallOption

// int32 Uid = 1;
void RpcServiceCallOption::clear_uid() {
  uid_ = 0;
}
::google::protobuf::int32 RpcServiceCallOption::uid() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcServiceCallOption.Uid)
  return uid_;
}
void RpcServiceCallOption::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcServiceCallOption.Uid)
}

// bool IsOneWay = 2;
void RpcServiceCallOption::clear_isoneway() {
  isoneway_ = false;
}
bool RpcServiceCallOption::isoneway() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcServiceCallOption.IsOneWay)
  return isoneway_;
}
void RpcServiceCallOption::set_isoneway(bool value) {
  
  isoneway_ = value;
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcServiceCallOption.IsOneWay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcCallArgsEmpty::RpcCallArgsEmpty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RpcProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nirge.Core.RpcCallArgsEmpty)
}
RpcCallArgsEmpty::RpcCallArgsEmpty(const RpcCallArgsEmpty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nirge.Core.RpcCallArgsEmpty)
}

void RpcCallArgsEmpty::SharedCtor() {
  _cached_size_ = 0;
}

RpcCallArgsEmpty::~RpcCallArgsEmpty() {
  // @@protoc_insertion_point(destructor:Nirge.Core.RpcCallArgsEmpty)
  SharedDtor();
}

void RpcCallArgsEmpty::SharedDtor() {
}

void RpcCallArgsEmpty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcCallArgsEmpty::descriptor() {
  protobuf_RpcProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcCallArgsEmpty& RpcCallArgsEmpty::default_instance() {
  protobuf_RpcProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

RpcCallArgsEmpty* RpcCallArgsEmpty::New(::google::protobuf::Arena* arena) const {
  RpcCallArgsEmpty* n = new RpcCallArgsEmpty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcCallArgsEmpty::Clear() {
// @@protoc_insertion_point(message_clear_start:Nirge.Core.RpcCallArgsEmpty)
}

bool RpcCallArgsEmpty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nirge.Core.RpcCallArgsEmpty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Nirge.Core.RpcCallArgsEmpty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nirge.Core.RpcCallArgsEmpty)
  return false;
#undef DO_
}

void RpcCallArgsEmpty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nirge.Core.RpcCallArgsEmpty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:Nirge.Core.RpcCallArgsEmpty)
}

::google::protobuf::uint8* RpcCallArgsEmpty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Nirge.Core.RpcCallArgsEmpty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:Nirge.Core.RpcCallArgsEmpty)
  return target;
}

size_t RpcCallArgsEmpty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nirge.Core.RpcCallArgsEmpty)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcCallArgsEmpty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nirge.Core.RpcCallArgsEmpty)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcCallArgsEmpty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcCallArgsEmpty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nirge.Core.RpcCallArgsEmpty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nirge.Core.RpcCallArgsEmpty)
    MergeFrom(*source);
  }
}

void RpcCallArgsEmpty::MergeFrom(const RpcCallArgsEmpty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nirge.Core.RpcCallArgsEmpty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RpcCallArgsEmpty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nirge.Core.RpcCallArgsEmpty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcCallArgsEmpty::CopyFrom(const RpcCallArgsEmpty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nirge.Core.RpcCallArgsEmpty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcCallArgsEmpty::IsInitialized() const {
  return true;
}

void RpcCallArgsEmpty::Swap(RpcCallArgsEmpty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcCallArgsEmpty::InternalSwap(RpcCallArgsEmpty* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcCallArgsEmpty::GetMetadata() const {
  protobuf_RpcProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcCallArgsEmpty

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcCallReq::kSerialFieldNumber;
const int RpcCallReq::kServiceFieldNumber;
const int RpcCallReq::kCallFieldNumber;
const int RpcCallReq::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcCallReq::RpcCallReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RpcProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nirge.Core.RpcCallReq)
}
RpcCallReq::RpcCallReq(const RpcCallReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.args().size() > 0) {
    args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
  }
  ::memcpy(&serial_, &from.serial_,
    static_cast<size_t>(reinterpret_cast<char*>(&call_) -
    reinterpret_cast<char*>(&serial_)) + sizeof(call_));
  // @@protoc_insertion_point(copy_constructor:Nirge.Core.RpcCallReq)
}

void RpcCallReq::SharedCtor() {
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(call_));
  _cached_size_ = 0;
}

RpcCallReq::~RpcCallReq() {
  // @@protoc_insertion_point(destructor:Nirge.Core.RpcCallReq)
  SharedDtor();
}

void RpcCallReq::SharedDtor() {
  args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RpcCallReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcCallReq::descriptor() {
  protobuf_RpcProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcCallReq& RpcCallReq::default_instance() {
  protobuf_RpcProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

RpcCallReq* RpcCallReq::New(::google::protobuf::Arena* arena) const {
  RpcCallReq* n = new RpcCallReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcCallReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nirge.Core.RpcCallReq)
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(call_));
}

bool RpcCallReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nirge.Core.RpcCallReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Serial = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Service = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Call = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Args = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nirge.Core.RpcCallReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nirge.Core.RpcCallReq)
  return false;
#undef DO_
}

void RpcCallReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nirge.Core.RpcCallReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Serial = 1;
  if (this->serial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serial(), output);
  }

  // int32 Service = 2;
  if (this->service() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->service(), output);
  }

  // int32 Call = 3;
  if (this->call() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->call(), output);
  }

  // bytes Args = 4;
  if (this->args().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->args(), output);
  }

  // @@protoc_insertion_point(serialize_end:Nirge.Core.RpcCallReq)
}

::google::protobuf::uint8* RpcCallReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Nirge.Core.RpcCallReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Serial = 1;
  if (this->serial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serial(), target);
  }

  // int32 Service = 2;
  if (this->service() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->service(), target);
  }

  // int32 Call = 3;
  if (this->call() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->call(), target);
  }

  // bytes Args = 4;
  if (this->args().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->args(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Nirge.Core.RpcCallReq)
  return target;
}

size_t RpcCallReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nirge.Core.RpcCallReq)
  size_t total_size = 0;

  // bytes Args = 4;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->args());
  }

  // int32 Serial = 1;
  if (this->serial() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serial());
  }

  // int32 Service = 2;
  if (this->service() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->service());
  }

  // int32 Call = 3;
  if (this->call() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->call());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcCallReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nirge.Core.RpcCallReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcCallReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcCallReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nirge.Core.RpcCallReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nirge.Core.RpcCallReq)
    MergeFrom(*source);
  }
}

void RpcCallReq::MergeFrom(const RpcCallReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nirge.Core.RpcCallReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.args().size() > 0) {

    args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
  }
  if (from.serial() != 0) {
    set_serial(from.serial());
  }
  if (from.service() != 0) {
    set_service(from.service());
  }
  if (from.call() != 0) {
    set_call(from.call());
  }
}

void RpcCallReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nirge.Core.RpcCallReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcCallReq::CopyFrom(const RpcCallReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nirge.Core.RpcCallReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcCallReq::IsInitialized() const {
  return true;
}

void RpcCallReq::Swap(RpcCallReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcCallReq::InternalSwap(RpcCallReq* other) {
  args_.Swap(&other->args_);
  std::swap(serial_, other->serial_);
  std::swap(service_, other->service_);
  std::swap(call_, other->call_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcCallReq::GetMetadata() const {
  protobuf_RpcProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcCallReq

// int32 Serial = 1;
void RpcCallReq::clear_serial() {
  serial_ = 0;
}
::google::protobuf::int32 RpcCallReq::serial() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcCallReq.Serial)
  return serial_;
}
void RpcCallReq::set_serial(::google::protobuf::int32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcCallReq.Serial)
}

// int32 Service = 2;
void RpcCallReq::clear_service() {
  service_ = 0;
}
::google::protobuf::int32 RpcCallReq::service() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcCallReq.Service)
  return service_;
}
void RpcCallReq::set_service(::google::protobuf::int32 value) {
  
  service_ = value;
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcCallReq.Service)
}

// int32 Call = 3;
void RpcCallReq::clear_call() {
  call_ = 0;
}
::google::protobuf::int32 RpcCallReq::call() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcCallReq.Call)
  return call_;
}
void RpcCallReq::set_call(::google::protobuf::int32 value) {
  
  call_ = value;
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcCallReq.Call)
}

// bytes Args = 4;
void RpcCallReq::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RpcCallReq::args() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcCallReq.Args)
  return args_.GetNoArena();
}
void RpcCallReq::set_args(const ::std::string& value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcCallReq.Args)
}
#if LANG_CXX11
void RpcCallReq::set_args(::std::string&& value) {
  
  args_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nirge.Core.RpcCallReq.Args)
}
#endif
void RpcCallReq::set_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nirge.Core.RpcCallReq.Args)
}
void RpcCallReq::set_args(const void* value, size_t size) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nirge.Core.RpcCallReq.Args)
}
::std::string* RpcCallReq::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:Nirge.Core.RpcCallReq.Args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RpcCallReq::release_args() {
  // @@protoc_insertion_point(field_release:Nirge.Core.RpcCallReq.Args)
  
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RpcCallReq::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:Nirge.Core.RpcCallReq.Args)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcCallRsp::kSerialFieldNumber;
const int RpcCallRsp::kServiceFieldNumber;
const int RpcCallRsp::kCallFieldNumber;
const int RpcCallRsp::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcCallRsp::RpcCallRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RpcProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nirge.Core.RpcCallRsp)
}
RpcCallRsp::RpcCallRsp(const RpcCallRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ret().size() > 0) {
    ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_);
  }
  ::memcpy(&serial_, &from.serial_,
    static_cast<size_t>(reinterpret_cast<char*>(&call_) -
    reinterpret_cast<char*>(&serial_)) + sizeof(call_));
  // @@protoc_insertion_point(copy_constructor:Nirge.Core.RpcCallRsp)
}

void RpcCallRsp::SharedCtor() {
  ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(call_));
  _cached_size_ = 0;
}

RpcCallRsp::~RpcCallRsp() {
  // @@protoc_insertion_point(destructor:Nirge.Core.RpcCallRsp)
  SharedDtor();
}

void RpcCallRsp::SharedDtor() {
  ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RpcCallRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcCallRsp::descriptor() {
  protobuf_RpcProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcCallRsp& RpcCallRsp::default_instance() {
  protobuf_RpcProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

RpcCallRsp* RpcCallRsp::New(::google::protobuf::Arena* arena) const {
  RpcCallRsp* n = new RpcCallRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcCallRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:Nirge.Core.RpcCallRsp)
  ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(call_));
}

bool RpcCallRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nirge.Core.RpcCallRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Serial = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Service = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Call = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Ret = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nirge.Core.RpcCallRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nirge.Core.RpcCallRsp)
  return false;
#undef DO_
}

void RpcCallRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nirge.Core.RpcCallRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Serial = 1;
  if (this->serial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serial(), output);
  }

  // int32 Service = 2;
  if (this->service() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->service(), output);
  }

  // int32 Call = 3;
  if (this->call() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->call(), output);
  }

  // bytes Ret = 4;
  if (this->ret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ret(), output);
  }

  // @@protoc_insertion_point(serialize_end:Nirge.Core.RpcCallRsp)
}

::google::protobuf::uint8* RpcCallRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Nirge.Core.RpcCallRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Serial = 1;
  if (this->serial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serial(), target);
  }

  // int32 Service = 2;
  if (this->service() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->service(), target);
  }

  // int32 Call = 3;
  if (this->call() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->call(), target);
  }

  // bytes Ret = 4;
  if (this->ret().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ret(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Nirge.Core.RpcCallRsp)
  return target;
}

size_t RpcCallRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nirge.Core.RpcCallRsp)
  size_t total_size = 0;

  // bytes Ret = 4;
  if (this->ret().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ret());
  }

  // int32 Serial = 1;
  if (this->serial() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serial());
  }

  // int32 Service = 2;
  if (this->service() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->service());
  }

  // int32 Call = 3;
  if (this->call() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->call());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcCallRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nirge.Core.RpcCallRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcCallRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcCallRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nirge.Core.RpcCallRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nirge.Core.RpcCallRsp)
    MergeFrom(*source);
  }
}

void RpcCallRsp::MergeFrom(const RpcCallRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nirge.Core.RpcCallRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret().size() > 0) {

    ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_);
  }
  if (from.serial() != 0) {
    set_serial(from.serial());
  }
  if (from.service() != 0) {
    set_service(from.service());
  }
  if (from.call() != 0) {
    set_call(from.call());
  }
}

void RpcCallRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nirge.Core.RpcCallRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcCallRsp::CopyFrom(const RpcCallRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nirge.Core.RpcCallRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcCallRsp::IsInitialized() const {
  return true;
}

void RpcCallRsp::Swap(RpcCallRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcCallRsp::InternalSwap(RpcCallRsp* other) {
  ret_.Swap(&other->ret_);
  std::swap(serial_, other->serial_);
  std::swap(service_, other->service_);
  std::swap(call_, other->call_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcCallRsp::GetMetadata() const {
  protobuf_RpcProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcCallRsp

// int32 Serial = 1;
void RpcCallRsp::clear_serial() {
  serial_ = 0;
}
::google::protobuf::int32 RpcCallRsp::serial() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcCallRsp.Serial)
  return serial_;
}
void RpcCallRsp::set_serial(::google::protobuf::int32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcCallRsp.Serial)
}

// int32 Service = 2;
void RpcCallRsp::clear_service() {
  service_ = 0;
}
::google::protobuf::int32 RpcCallRsp::service() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcCallRsp.Service)
  return service_;
}
void RpcCallRsp::set_service(::google::protobuf::int32 value) {
  
  service_ = value;
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcCallRsp.Service)
}

// int32 Call = 3;
void RpcCallRsp::clear_call() {
  call_ = 0;
}
::google::protobuf::int32 RpcCallRsp::call() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcCallRsp.Call)
  return call_;
}
void RpcCallRsp::set_call(::google::protobuf::int32 value) {
  
  call_ = value;
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcCallRsp.Call)
}

// bytes Ret = 4;
void RpcCallRsp::clear_ret() {
  ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RpcCallRsp::ret() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcCallRsp.Ret)
  return ret_.GetNoArena();
}
void RpcCallRsp::set_ret(const ::std::string& value) {
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcCallRsp.Ret)
}
#if LANG_CXX11
void RpcCallRsp::set_ret(::std::string&& value) {
  
  ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nirge.Core.RpcCallRsp.Ret)
}
#endif
void RpcCallRsp::set_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nirge.Core.RpcCallRsp.Ret)
}
void RpcCallRsp::set_ret(const void* value, size_t size) {
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nirge.Core.RpcCallRsp.Ret)
}
::std::string* RpcCallRsp::mutable_ret() {
  
  // @@protoc_insertion_point(field_mutable:Nirge.Core.RpcCallRsp.Ret)
  return ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RpcCallRsp::release_ret() {
  // @@protoc_insertion_point(field_release:Nirge.Core.RpcCallRsp.Ret)
  
  return ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RpcCallRsp::set_allocated_ret(::std::string* ret) {
  if (ret != NULL) {
    
  } else {
    
  }
  ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret);
  // @@protoc_insertion_point(field_set_allocated:Nirge.Core.RpcCallRsp.Ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcCallExceptionRsp::kSerialFieldNumber;
const int RpcCallExceptionRsp::kServiceFieldNumber;
const int RpcCallExceptionRsp::kCallFieldNumber;
const int RpcCallExceptionRsp::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcCallExceptionRsp::RpcCallExceptionRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RpcProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nirge.Core.RpcCallExceptionRsp)
}
RpcCallExceptionRsp::RpcCallExceptionRsp(const RpcCallExceptionRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&serial_, &from.serial_,
    static_cast<size_t>(reinterpret_cast<char*>(&exception_) -
    reinterpret_cast<char*>(&serial_)) + sizeof(exception_));
  // @@protoc_insertion_point(copy_constructor:Nirge.Core.RpcCallExceptionRsp)
}

void RpcCallExceptionRsp::SharedCtor() {
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exception_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(exception_));
  _cached_size_ = 0;
}

RpcCallExceptionRsp::~RpcCallExceptionRsp() {
  // @@protoc_insertion_point(destructor:Nirge.Core.RpcCallExceptionRsp)
  SharedDtor();
}

void RpcCallExceptionRsp::SharedDtor() {
}

void RpcCallExceptionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcCallExceptionRsp::descriptor() {
  protobuf_RpcProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcCallExceptionRsp& RpcCallExceptionRsp::default_instance() {
  protobuf_RpcProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

RpcCallExceptionRsp* RpcCallExceptionRsp::New(::google::protobuf::Arena* arena) const {
  RpcCallExceptionRsp* n = new RpcCallExceptionRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcCallExceptionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:Nirge.Core.RpcCallExceptionRsp)
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exception_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(exception_));
}

bool RpcCallExceptionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nirge.Core.RpcCallExceptionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Serial = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Service = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Call = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Exception = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exception_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nirge.Core.RpcCallExceptionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nirge.Core.RpcCallExceptionRsp)
  return false;
#undef DO_
}

void RpcCallExceptionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nirge.Core.RpcCallExceptionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Serial = 1;
  if (this->serial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serial(), output);
  }

  // int32 Service = 2;
  if (this->service() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->service(), output);
  }

  // int32 Call = 3;
  if (this->call() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->call(), output);
  }

  // int32 Exception = 4;
  if (this->exception() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exception(), output);
  }

  // @@protoc_insertion_point(serialize_end:Nirge.Core.RpcCallExceptionRsp)
}

::google::protobuf::uint8* RpcCallExceptionRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Nirge.Core.RpcCallExceptionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Serial = 1;
  if (this->serial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serial(), target);
  }

  // int32 Service = 2;
  if (this->service() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->service(), target);
  }

  // int32 Call = 3;
  if (this->call() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->call(), target);
  }

  // int32 Exception = 4;
  if (this->exception() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exception(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Nirge.Core.RpcCallExceptionRsp)
  return target;
}

size_t RpcCallExceptionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nirge.Core.RpcCallExceptionRsp)
  size_t total_size = 0;

  // int32 Serial = 1;
  if (this->serial() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serial());
  }

  // int32 Service = 2;
  if (this->service() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->service());
  }

  // int32 Call = 3;
  if (this->call() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->call());
  }

  // int32 Exception = 4;
  if (this->exception() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exception());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcCallExceptionRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nirge.Core.RpcCallExceptionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcCallExceptionRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcCallExceptionRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nirge.Core.RpcCallExceptionRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nirge.Core.RpcCallExceptionRsp)
    MergeFrom(*source);
  }
}

void RpcCallExceptionRsp::MergeFrom(const RpcCallExceptionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nirge.Core.RpcCallExceptionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serial() != 0) {
    set_serial(from.serial());
  }
  if (from.service() != 0) {
    set_service(from.service());
  }
  if (from.call() != 0) {
    set_call(from.call());
  }
  if (from.exception() != 0) {
    set_exception(from.exception());
  }
}

void RpcCallExceptionRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nirge.Core.RpcCallExceptionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcCallExceptionRsp::CopyFrom(const RpcCallExceptionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nirge.Core.RpcCallExceptionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcCallExceptionRsp::IsInitialized() const {
  return true;
}

void RpcCallExceptionRsp::Swap(RpcCallExceptionRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcCallExceptionRsp::InternalSwap(RpcCallExceptionRsp* other) {
  std::swap(serial_, other->serial_);
  std::swap(service_, other->service_);
  std::swap(call_, other->call_);
  std::swap(exception_, other->exception_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcCallExceptionRsp::GetMetadata() const {
  protobuf_RpcProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcCallExceptionRsp

// int32 Serial = 1;
void RpcCallExceptionRsp::clear_serial() {
  serial_ = 0;
}
::google::protobuf::int32 RpcCallExceptionRsp::serial() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcCallExceptionRsp.Serial)
  return serial_;
}
void RpcCallExceptionRsp::set_serial(::google::protobuf::int32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcCallExceptionRsp.Serial)
}

// int32 Service = 2;
void RpcCallExceptionRsp::clear_service() {
  service_ = 0;
}
::google::protobuf::int32 RpcCallExceptionRsp::service() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcCallExceptionRsp.Service)
  return service_;
}
void RpcCallExceptionRsp::set_service(::google::protobuf::int32 value) {
  
  service_ = value;
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcCallExceptionRsp.Service)
}

// int32 Call = 3;
void RpcCallExceptionRsp::clear_call() {
  call_ = 0;
}
::google::protobuf::int32 RpcCallExceptionRsp::call() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcCallExceptionRsp.Call)
  return call_;
}
void RpcCallExceptionRsp::set_call(::google::protobuf::int32 value) {
  
  call_ = value;
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcCallExceptionRsp.Call)
}

// int32 Exception = 4;
void RpcCallExceptionRsp::clear_exception() {
  exception_ = 0;
}
::google::protobuf::int32 RpcCallExceptionRsp::exception() const {
  // @@protoc_insertion_point(field_get:Nirge.Core.RpcCallExceptionRsp.Exception)
  return exception_;
}
void RpcCallExceptionRsp::set_exception(::google::protobuf::int32 value) {
  
  exception_ = value;
  // @@protoc_insertion_point(field_set:Nirge.Core.RpcCallExceptionRsp.Exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::Nirge::Core::RpcServiceOption >, 11, false >
  RpcService(kRpcServiceFieldNumber, *::Nirge::Core::RpcServiceOption::internal_default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::Nirge::Core::RpcServiceCallOption >, 11, false >
  RpcServiceCall(kRpcServiceCallFieldNumber, *::Nirge::Core::RpcServiceCallOption::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace Core
}  // namespace Nirge

// @@protoc_insertion_point(global_scope)
