// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nirge.Core {

  /// <summary>Holder for reflection information generated from RpcProto.proto</summary>
  public static partial class RpcProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for RpcProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpcProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5ScGNQcm90by5wcm90bxIPZ29vZ2xlLnByb3RvYnVmGhlnb29nbGUvcHJv",
            "dG9idWYvYW55LnByb3RvGgtQcm90by5wcm90byJfCgpDMnNScGNDYWxsEg4K",
            "BlNlcmlhbBgBIAEoBRIPCgdTZXJ2aWNlGAIgASgFEgwKBENhbGwYAyABKAUS",
            "IgoEQXJncxgEIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkiXgoKUzJjUnBj",
            "Q2FsbBIOCgZTZXJpYWwYASABKAUSDwoHU2VydmljZRgCIAEoBRIMCgRDYWxs",
            "GAMgASgFEiEKA1JldBgEIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkiVwoT",
            "UzJjUnBjQ2FsbEV4Y2VwdGlvbhIOCgZTZXJpYWwYASABKAUSDwoHU2Vydmlj",
            "ZRgCIAEoBRIMCgRDYWxsGAMgASgFEhEKCUV4Y2VwdGlvbhgEIAEoBUINqgIK",
            "TmlyZ2UuQ29yZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Nirge.Core.ProtoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nirge.Core.C2sRpcCall), global::Nirge.Core.C2sRpcCall.Parser, new[]{ "Serial", "Service", "Call", "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nirge.Core.S2cRpcCall), global::Nirge.Core.S2cRpcCall.Parser, new[]{ "Serial", "Service", "Call", "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nirge.Core.S2cRpcCallException), global::Nirge.Core.S2cRpcCallException.Parser, new[]{ "Serial", "Service", "Call", "Exception" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class C2sRpcCall : pb::IMessage<C2sRpcCall> {
    private static readonly pb::MessageParser<C2sRpcCall> _parser = new pb::MessageParser<C2sRpcCall>(() => new C2sRpcCall());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2sRpcCall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nirge.Core.RpcProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2sRpcCall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2sRpcCall(C2sRpcCall other) : this() {
      serial_ = other.serial_;
      service_ = other.service_;
      call_ = other.call_;
      Args = other.args_ != null ? other.Args.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2sRpcCall Clone() {
      return new C2sRpcCall(this);
    }

    /// <summary>Field number for the "Serial" field.</summary>
    public const int SerialFieldNumber = 1;
    private int serial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Serial {
      get { return serial_; }
      set {
        serial_ = value;
      }
    }

    /// <summary>Field number for the "Service" field.</summary>
    public const int ServiceFieldNumber = 2;
    private int service_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    /// <summary>Field number for the "Call" field.</summary>
    public const int CallFieldNumber = 3;
    private int call_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Call {
      get { return call_; }
      set {
        call_ = value;
      }
    }

    /// <summary>Field number for the "Args" field.</summary>
    public const int ArgsFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Any args_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Args {
      get { return args_; }
      set {
        args_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2sRpcCall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2sRpcCall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Serial != other.Serial) return false;
      if (Service != other.Service) return false;
      if (Call != other.Call) return false;
      if (!object.Equals(Args, other.Args)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Serial != 0) hash ^= Serial.GetHashCode();
      if (Service != 0) hash ^= Service.GetHashCode();
      if (Call != 0) hash ^= Call.GetHashCode();
      if (args_ != null) hash ^= Args.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Serial != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Serial);
      }
      if (Service != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Service);
      }
      if (Call != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Call);
      }
      if (args_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Args);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Serial != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Serial);
      }
      if (Service != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Service);
      }
      if (Call != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Call);
      }
      if (args_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Args);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2sRpcCall other) {
      if (other == null) {
        return;
      }
      if (other.Serial != 0) {
        Serial = other.Serial;
      }
      if (other.Service != 0) {
        Service = other.Service;
      }
      if (other.Call != 0) {
        Call = other.Call;
      }
      if (other.args_ != null) {
        if (args_ == null) {
          args_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Args.MergeFrom(other.Args);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Serial = input.ReadInt32();
            break;
          }
          case 16: {
            Service = input.ReadInt32();
            break;
          }
          case 24: {
            Call = input.ReadInt32();
            break;
          }
          case 34: {
            if (args_ == null) {
              args_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(args_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2cRpcCall : pb::IMessage<S2cRpcCall> {
    private static readonly pb::MessageParser<S2cRpcCall> _parser = new pb::MessageParser<S2cRpcCall>(() => new S2cRpcCall());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2cRpcCall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nirge.Core.RpcProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2cRpcCall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2cRpcCall(S2cRpcCall other) : this() {
      serial_ = other.serial_;
      service_ = other.service_;
      call_ = other.call_;
      Ret = other.ret_ != null ? other.Ret.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2cRpcCall Clone() {
      return new S2cRpcCall(this);
    }

    /// <summary>Field number for the "Serial" field.</summary>
    public const int SerialFieldNumber = 1;
    private int serial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Serial {
      get { return serial_; }
      set {
        serial_ = value;
      }
    }

    /// <summary>Field number for the "Service" field.</summary>
    public const int ServiceFieldNumber = 2;
    private int service_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    /// <summary>Field number for the "Call" field.</summary>
    public const int CallFieldNumber = 3;
    private int call_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Call {
      get { return call_; }
      set {
        call_ = value;
      }
    }

    /// <summary>Field number for the "Ret" field.</summary>
    public const int RetFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Any ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2cRpcCall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2cRpcCall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Serial != other.Serial) return false;
      if (Service != other.Service) return false;
      if (Call != other.Call) return false;
      if (!object.Equals(Ret, other.Ret)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Serial != 0) hash ^= Serial.GetHashCode();
      if (Service != 0) hash ^= Service.GetHashCode();
      if (Call != 0) hash ^= Call.GetHashCode();
      if (ret_ != null) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Serial != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Serial);
      }
      if (Service != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Service);
      }
      if (Call != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Call);
      }
      if (ret_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Serial != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Serial);
      }
      if (Service != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Service);
      }
      if (Call != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Call);
      }
      if (ret_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2cRpcCall other) {
      if (other == null) {
        return;
      }
      if (other.Serial != 0) {
        Serial = other.Serial;
      }
      if (other.Service != 0) {
        Service = other.Service;
      }
      if (other.Call != 0) {
        Call = other.Call;
      }
      if (other.ret_ != null) {
        if (ret_ == null) {
          ret_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Ret.MergeFrom(other.Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Serial = input.ReadInt32();
            break;
          }
          case 16: {
            Service = input.ReadInt32();
            break;
          }
          case 24: {
            Call = input.ReadInt32();
            break;
          }
          case 34: {
            if (ret_ == null) {
              ret_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(ret_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2cRpcCallException : pb::IMessage<S2cRpcCallException> {
    private static readonly pb::MessageParser<S2cRpcCallException> _parser = new pb::MessageParser<S2cRpcCallException>(() => new S2cRpcCallException());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2cRpcCallException> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nirge.Core.RpcProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2cRpcCallException() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2cRpcCallException(S2cRpcCallException other) : this() {
      serial_ = other.serial_;
      service_ = other.service_;
      call_ = other.call_;
      exception_ = other.exception_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2cRpcCallException Clone() {
      return new S2cRpcCallException(this);
    }

    /// <summary>Field number for the "Serial" field.</summary>
    public const int SerialFieldNumber = 1;
    private int serial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Serial {
      get { return serial_; }
      set {
        serial_ = value;
      }
    }

    /// <summary>Field number for the "Service" field.</summary>
    public const int ServiceFieldNumber = 2;
    private int service_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    /// <summary>Field number for the "Call" field.</summary>
    public const int CallFieldNumber = 3;
    private int call_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Call {
      get { return call_; }
      set {
        call_ = value;
      }
    }

    /// <summary>Field number for the "Exception" field.</summary>
    public const int ExceptionFieldNumber = 4;
    private int exception_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exception {
      get { return exception_; }
      set {
        exception_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2cRpcCallException);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2cRpcCallException other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Serial != other.Serial) return false;
      if (Service != other.Service) return false;
      if (Call != other.Call) return false;
      if (Exception != other.Exception) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Serial != 0) hash ^= Serial.GetHashCode();
      if (Service != 0) hash ^= Service.GetHashCode();
      if (Call != 0) hash ^= Call.GetHashCode();
      if (Exception != 0) hash ^= Exception.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Serial != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Serial);
      }
      if (Service != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Service);
      }
      if (Call != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Call);
      }
      if (Exception != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Exception);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Serial != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Serial);
      }
      if (Service != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Service);
      }
      if (Call != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Call);
      }
      if (Exception != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exception);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2cRpcCallException other) {
      if (other == null) {
        return;
      }
      if (other.Serial != 0) {
        Serial = other.Serial;
      }
      if (other.Service != 0) {
        Service = other.Service;
      }
      if (other.Call != 0) {
        Call = other.Call;
      }
      if (other.Exception != 0) {
        Exception = other.Exception;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Serial = input.ReadInt32();
            break;
          }
          case 16: {
            Service = input.ReadInt32();
            break;
          }
          case 24: {
            Call = input.ReadInt32();
            break;
          }
          case 32: {
            Exception = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
